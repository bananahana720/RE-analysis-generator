{
  "testModules": [
    {
      "moduleId": "tests/collectors/processing/test_cache_manager.py",
      "tests": [
        {
          "name": "test_cache_key_generation",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheManager::test_cache_key_generation",
          "state": "passed"
        },
        {
          "name": "test_cache_miss_returns_none",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheManager::test_cache_miss_returns_none",
          "state": "passed"
        },
        {
          "name": "test_cache_hit_returns_data",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheManager::test_cache_hit_returns_data",
          "state": "passed"
        },
        {
          "name": "test_cache_ttl_expiration",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheManager::test_cache_ttl_expiration",
          "state": "passed"
        },
        {
          "name": "test_cache_size_limits",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheManager::test_cache_size_limits",
          "state": "passed"
        },
        {
          "name": "test_cache_warmup",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheManager::test_cache_warmup",
          "state": "passed"
        },
        {
          "name": "test_cache_invalidation",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheManager::test_cache_invalidation",
          "state": "passed"
        },
        {
          "name": "test_concurrent_access",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheManager::test_concurrent_access",
          "state": "passed"
        },
        {
          "name": "test_graceful_degradation",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheManager::test_graceful_degradation",
          "state": "passed"
        },
        {
          "name": "test_lru_eviction",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestLRUCache::test_lru_eviction",
          "state": "passed"
        },
        {
          "name": "test_ttl_expiration",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestLRUCache::test_ttl_expiration",
          "state": "passed"
        },
        {
          "name": "test_size_tracking",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestLRUCache::test_size_tracking",
          "state": "passed"
        },
        {
          "name": "test_metrics_calculation",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheMetrics::test_metrics_calculation",
          "state": "passed"
        },
        {
          "name": "test_metrics_reset",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheMetrics::test_metrics_reset",
          "state": "passed"
        },
        {
          "name": "test_llm_client_with_cache",
          "fullName": "tests/collectors/processing/test_cache_manager.py::TestCacheIntegration::test_llm_client_with_cache",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_error_handling.py",
      "tests": [
        {
          "name": "test_classify_network_errors",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorClassifier::test_classify_network_errors",
          "state": "passed"
        },
        {
          "name": "test_classify_rate_limit_errors",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorClassifier::test_classify_rate_limit_errors",
          "state": "passed"
        },
        {
          "name": "test_classify_authentication_errors",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorClassifier::test_classify_authentication_errors",
          "state": "passed"
        },
        {
          "name": "test_classify_data_errors",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorClassifier::test_classify_data_errors",
          "state": "passed"
        },
        {
          "name": "test_classify_temporary_errors",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorClassifier::test_classify_temporary_errors",
          "state": "passed"
        },
        {
          "name": "test_classify_permanent_errors",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorClassifier::test_classify_permanent_errors",
          "state": "passed"
        },
        {
          "name": "test_classify_unknown_errors",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorClassifier::test_classify_unknown_errors",
          "state": "passed"
        },
        {
          "name": "test_get_recovery_action",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorClassifier::test_get_recovery_action",
          "state": "passed"
        },
        {
          "name": "test_initial_state",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestCircuitBreaker::test_initial_state",
          "state": "passed"
        },
        {
          "name": "test_success_in_closed_state",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestCircuitBreaker::test_success_in_closed_state",
          "state": "passed"
        },
        {
          "name": "test_failure_accumulation",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestCircuitBreaker::test_failure_accumulation",
          "state": "passed"
        },
        {
          "name": "test_open_state_blocks_calls",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestCircuitBreaker::test_open_state_blocks_calls",
          "state": "passed"
        },
        {
          "name": "test_half_open_state_after_timeout",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestCircuitBreaker::test_half_open_state_after_timeout",
          "state": "passed"
        },
        {
          "name": "test_half_open_success_closes_circuit",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestCircuitBreaker::test_half_open_success_closes_circuit",
          "state": "passed"
        },
        {
          "name": "test_half_open_failure_reopens_circuit",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestCircuitBreaker::test_half_open_failure_reopens_circuit",
          "state": "passed"
        },
        {
          "name": "test_async_execution_wrapper",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestCircuitBreaker::test_async_execution_wrapper",
          "state": "passed"
        },
        {
          "name": "test_add_failed_item",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestDeadLetterQueue::test_add_failed_item",
          "state": "passed"
        },
        {
          "name": "test_max_size_enforcement",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestDeadLetterQueue::test_max_size_enforcement",
          "state": "passed"
        },
        {
          "name": "test_get_items_by_error_type",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestDeadLetterQueue::test_get_items_by_error_type",
          "state": "passed"
        },
        {
          "name": "test_retry_failed_item",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestDeadLetterQueue::test_retry_failed_item",
          "state": "passed"
        },
        {
          "name": "test_retry_failed_item_fails_again",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestDeadLetterQueue::test_retry_failed_item_fails_again",
          "state": "passed"
        },
        {
          "name": "test_clear_queue",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestDeadLetterQueue::test_clear_queue",
          "state": "passed"
        },
        {
          "name": "test_export_to_file",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestDeadLetterQueue::test_export_to_file",
          "state": "passed"
        },
        {
          "name": "test_extract_address_from_text",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestFallbackExtractor::test_extract_address_from_text",
          "state": "passed"
        },
        {
          "name": "test_extract_price_from_text",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestFallbackExtractor::test_extract_price_from_text",
          "state": "passed"
        },
        {
          "name": "test_extract_bedrooms_bathrooms",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestFallbackExtractor::test_extract_bedrooms_bathrooms",
          "state": "passed"
        },
        {
          "name": "test_extract_square_footage",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestFallbackExtractor::test_extract_square_footage",
          "state": "passed"
        },
        {
          "name": "test_extract_year_built",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestFallbackExtractor::test_extract_year_built",
          "state": "passed"
        },
        {
          "name": "test_extract_parcel_number",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestFallbackExtractor::test_extract_parcel_number",
          "state": "passed"
        },
        {
          "name": "test_fallback_extraction_pipeline",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestFallbackExtractor::test_fallback_extraction_pipeline",
          "state": "passed"
        },
        {
          "name": "test_handle_network_error",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorRecoveryStrategy::test_handle_network_error",
          "state": "passed"
        },
        {
          "name": "test_handle_rate_limit_error",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorRecoveryStrategy::test_handle_rate_limit_error",
          "state": "passed"
        },
        {
          "name": "test_handle_data_error_with_fallback",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorRecoveryStrategy::test_handle_data_error_with_fallback",
          "state": "passed"
        },
        {
          "name": "test_circuit_breaker_integration",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorRecoveryStrategy::test_circuit_breaker_integration",
          "state": "passed"
        },
        {
          "name": "test_dead_letter_queue_integration",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorRecoveryStrategy::test_dead_letter_queue_integration",
          "state": "passed"
        },
        {
          "name": "test_comprehensive_error_handling",
          "fullName": "tests/collectors/processing/test_error_handling.py::TestErrorRecoveryStrategy::test_comprehensive_error_handling",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_error_handling_integration.py",
      "tests": [
        {
          "name": "test_circuit_breaker_with_llm_failures",
          "fullName": "tests/collectors/processing/test_error_handling_integration.py::TestErrorHandlingIntegration::test_circuit_breaker_with_llm_failures",
          "state": "passed"
        },
        {
          "name": "test_fallback_extraction_on_llm_parse_error",
          "fullName": "tests/collectors/processing/test_error_handling_integration.py::TestErrorHandlingIntegration::test_fallback_extraction_on_llm_parse_error",
          "state": "passed"
        },
        {
          "name": "test_rate_limit_handling_with_pipeline",
          "fullName": "tests/collectors/processing/test_error_handling_integration.py::TestErrorHandlingIntegration::test_rate_limit_handling_with_pipeline",
          "state": "passed"
        },
        {
          "name": "test_dead_letter_queue_with_permanent_failures",
          "fullName": "tests/collectors/processing/test_error_handling_integration.py::TestErrorHandlingIntegration::test_dead_letter_queue_with_permanent_failures",
          "state": "passed"
        },
        {
          "name": "test_error_recovery_with_full_pipeline",
          "fullName": "tests/collectors/processing/test_error_handling_integration.py::TestErrorHandlingIntegration::test_error_recovery_with_full_pipeline",
          "state": "passed"
        },
        {
          "name": "test_batch_processing_with_mixed_errors",
          "fullName": "tests/collectors/processing/test_error_handling_integration.py::TestErrorHandlingIntegration::test_batch_processing_with_mixed_errors",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_error_handling_simple_integration.py",
      "tests": [
        {
          "name": "test_circuit_breaker_protects_service",
          "fullName": "tests/collectors/processing/test_error_handling_simple_integration.py::TestSimpleErrorHandlingIntegration::test_circuit_breaker_protects_service",
          "state": "passed"
        },
        {
          "name": "test_fallback_extraction_workflow",
          "fullName": "tests/collectors/processing/test_error_handling_simple_integration.py::TestSimpleErrorHandlingIntegration::test_fallback_extraction_workflow",
          "state": "passed"
        },
        {
          "name": "test_dead_letter_queue_workflow",
          "fullName": "tests/collectors/processing/test_error_handling_simple_integration.py::TestSimpleErrorHandlingIntegration::test_dead_letter_queue_workflow",
          "state": "passed"
        },
        {
          "name": "test_error_classification_and_recovery",
          "fullName": "tests/collectors/processing/test_error_handling_simple_integration.py::TestSimpleErrorHandlingIntegration::test_error_classification_and_recovery",
          "state": "passed"
        },
        {
          "name": "test_comprehensive_error_recovery_flow",
          "fullName": "tests/collectors/processing/test_error_handling_simple_integration.py::TestSimpleErrorHandlingIntegration::test_comprehensive_error_recovery_flow",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_error_handling_simple_integration.py:243: in test_comprehensive_error_recovery_flow\n    ???\nE   assert 4 == 5"
            }
          ]
        },
        {
          "name": "test_error_recovery_metrics",
          "fullName": "tests/collectors/processing/test_error_handling_simple_integration.py::TestSimpleErrorHandlingIntegration::test_error_recovery_metrics",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_extractor.py",
      "tests": [
        {
          "name": "test_initialization",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_initialization",
          "state": "passed"
        },
        {
          "name": "test_initialize_creates_clients",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_initialize_creates_clients",
          "state": "passed"
        },
        {
          "name": "test_context_manager",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_context_manager",
          "state": "passed"
        },
        {
          "name": "test_extract_phoenix_mls_data",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_extract_phoenix_mls_data",
          "state": "passed"
        },
        {
          "name": "test_extract_maricopa_data",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_extract_maricopa_data",
          "state": "passed"
        },
        {
          "name": "test_get_extraction_prompt",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_get_extraction_prompt",
          "state": "passed"
        },
        {
          "name": "test_get_extraction_schema",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_get_extraction_schema",
          "state": "passed"
        },
        {
          "name": "test_llm_failure_handling",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_llm_failure_handling",
          "state": "passed"
        },
        {
          "name": "test_invalid_source_handling",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_invalid_source_handling",
          "state": "passed"
        },
        {
          "name": "test_batch_extraction",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_batch_extraction",
          "state": "passed"
        },
        {
          "name": "test_extraction_timeout",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_extraction_timeout",
          "state": "passed"
        },
        {
          "name": "test_full_extraction_pipeline",
          "fullName": "tests/collectors/processing/test_extractor.py::TestPropertyDataExtractor::test_full_extraction_pipeline",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_imports.py",
      "tests": [
        {
          "name": "test_module_imports",
          "fullName": "tests/collectors/processing/test_imports.py::test_module_imports",
          "state": "passed"
        },
        {
          "name": "test_module_version",
          "fullName": "tests/collectors/processing/test_imports.py::test_module_version",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_imports.py:25: in test_module_version\n    ???\nE   AssertionError: assert '0.2.0' == '0.1.0'\nE     \nE     - 0.1.0\nE     ?   ^\nE     + 0.2.0\nE     ?   ^"
            }
          ]
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_integration_performance.py",
      "tests": [
        {
          "name": "test_cache_integration",
          "fullName": "tests/collectors/processing/test_integration_performance.py::test_cache_integration",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_integration_performance.py:25: in test_cache_integration\n    mock_extract = AsyncMock(return_value={\n    ^^^^^^^^^^^^^^^\nE   AttributeError: 'BaseConfig' object has no attribute 'settings'. Did you mean: 'testing'?"
            }
          ]
        },
        {
          "name": "test_resource_monitoring_integration",
          "fullName": "tests/collectors/processing/test_integration_performance.py::test_resource_monitoring_integration",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_integration_performance.py:66: in test_resource_monitoring_integration\n    async def mock_extract(*args, **kwargs):\n    ^^^^^^^^^^^^^^^\nE   AttributeError: 'BaseConfig' object has no attribute 'settings'. Did you mean: 'testing'?"
            }
          ]
        },
        {
          "name": "test_batch_optimization",
          "fullName": "tests/collectors/processing/test_integration_performance.py::test_batch_optimization",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_integration_performance.py:99: in test_batch_optimization\n    call_count = 0\nE   AttributeError: 'BaseConfig' object has no attribute 'settings'. Did you mean: 'testing'?"
            }
          ]
        },
        {
          "name": "test_performance_with_all_features",
          "fullName": "tests/collectors/processing/test_integration_performance.py::test_performance_with_all_features",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_integration_performance.py:148: in test_performance_with_all_features\n    ])\n       \nsrc\\phoenix_real_estate\\collectors\\processing\\pipeline.py:52: in __init__\n    self.batch_size = config.get_typed('BATCH_SIZE', int, default=10)\n               ^^^^^^^^^^^^^^^\nE   AttributeError: 'BaseConfig' object has no attribute 'settings'. Did you mean: 'testing'?"
            }
          ]
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_ollama_client.py",
      "tests": [
        {
          "name": "test_client_initialization",
          "fullName": "tests/collectors/processing/test_ollama_client.py::TestOllamaClient::test_client_initialization",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_ollama_client.py:48: in test_client_initialization\n    return OllamaClient(test_config)\n             ^^^^^^^^^^^^^^^^^^^^^^^^\nsrc\\phoenix_real_estate\\collectors\\processing\\llm_client.py:28: in __init__\n    ???\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:690: in __getattr__\n    raise AttributeError(\"Mock object has no attribute %r\" % name)\nE   AttributeError: Mock object has no attribute 'get_typed'"
            }
          ]
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_ollama_integration.py",
      "tests": [
        {
          "name": "test_real_health_check",
          "fullName": "tests/collectors/processing/test_ollama_integration.py::TestOllamaIntegration::test_real_health_check",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_ollama_integration.py:38: in test_real_health_check\n    async with OllamaClient(real_config) as client:\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\nsrc\\phoenix_real_estate\\collectors\\processing\\llm_client.py:28: in __init__\n    ???\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:690: in __getattr__\n    raise AttributeError(\"Mock object has no attribute %r\" % name)\nE   AttributeError: Mock object has no attribute 'get_typed'"
            }
          ]
        },
        {
          "name": "test_real_completion",
          "fullName": "tests/collectors/processing/test_ollama_integration.py::TestOllamaIntegration::test_real_completion",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_ollama_integration.py:54: in test_real_completion\n    async with OllamaClient(real_config) as client:\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\nsrc\\phoenix_real_estate\\collectors\\processing\\llm_client.py:28: in __init__\n    ???\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:690: in __getattr__\n    raise AttributeError(\"Mock object has no attribute %r\" % name)\nE   AttributeError: Mock object has no attribute 'get_typed'"
            }
          ]
        },
        {
          "name": "test_real_extraction",
          "fullName": "tests/collectors/processing/test_ollama_integration.py::TestOllamaIntegration::test_real_extraction",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_ollama_integration.py:76: in test_real_extraction\n    async with OllamaClient(real_config) as client:\n               ^^^^^^^^^^^^^^^^^^^^^^^^^\nsrc\\phoenix_real_estate\\collectors\\processing\\llm_client.py:28: in __init__\n    ???\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\unittest\\mock.py:690: in __getattr__\n    raise AttributeError(\"Mock object has no attribute %r\" % name)\nE   AttributeError: Mock object has no attribute 'get_typed'"
            }
          ]
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_ollama_setup.py",
      "tests": [
        {
          "name": "test_ollama_service_available",
          "fullName": "tests/collectors/processing/test_ollama_setup.py::test_ollama_service_available",
          "state": "passed"
        },
        {
          "name": "test_llama3_model_available",
          "fullName": "tests/collectors/processing/test_ollama_setup.py::test_llama3_model_available",
          "state": "passed"
        },
        {
          "name": "test_ollama_generate_endpoint",
          "fullName": "tests/collectors/processing/test_ollama_setup.py::test_ollama_generate_endpoint",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_performance_benchmarks.py",
      "tests": [
        {
          "name": "test_adaptive_batch_sizing",
          "fullName": "tests/collectors/processing/test_performance_benchmarks.py::TestPerformanceOptimizer::test_adaptive_batch_sizing",
          "state": "passed"
        },
        {
          "name": "test_circuit_breaker_performance",
          "fullName": "tests/collectors/processing/test_performance_benchmarks.py::TestPerformanceOptimizer::test_circuit_breaker_performance",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_performance_benchmarks.py:302: in test_circuit_breaker_performance\n    ???\nE   ModuleNotFoundError: No module named 'phoenix_real_estate.foundation.utils.circuit_breaker'"
            }
          ]
        },
        {
          "name": "test_performance_recommendations",
          "fullName": "tests/collectors/processing/test_performance_benchmarks.py::TestPerformanceOptimizer::test_performance_recommendations",
          "state": "passed"
        },
        {
          "name": "test_result_statistics",
          "fullName": "tests/collectors/processing/test_performance_benchmarks.py::TestBenchmarkResult::test_result_statistics",
          "state": "passed"
        },
        {
          "name": "test_result_comparison",
          "fullName": "tests/collectors/processing/test_performance_benchmarks.py::TestBenchmarkResult::test_result_comparison",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_pipeline.py",
      "tests": [
        {
          "name": "test_pipeline_initialization",
          "fullName": "tests/collectors/processing/test_pipeline.py::TestDataProcessingPipeline::test_pipeline_initialization",
          "state": "passed"
        },
        {
          "name": "test_pipeline_context_manager",
          "fullName": "tests/collectors/processing/test_pipeline.py::TestDataProcessingPipeline::test_pipeline_context_manager",
          "state": "failed",
          "errors": [
            {
              "message": "src\\phoenix_real_estate\\collectors\\processing\\cache.py:232: in initialize\n    ???\nsrc\\phoenix_real_estate\\collectors\\processing\\cache.py:250: in _init_memory\n    max_memory_mb=self.config.max_size_mb\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   TypeError: unsupported operand type(s) for *: 'Mock' and 'int'\n\nDuring handling of the above exception, another exception occurred:\nsrc\\phoenix_real_estate\\collectors\\processing\\pipeline.py:121: in initialize\n    ???\nsrc\\phoenix_real_estate\\collectors\\processing\\cache.py:243: in initialize\n    self._initialized = True\nsrc\\phoenix_real_estate\\collectors\\processing\\cache.py:250: in _init_memory\n    max_memory_mb=self.config.max_size_mb\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   TypeError: unsupported operand type(s) for *: 'Mock' and 'int'\n\nThe above exception was the direct cause of the following exception:\ntests\\collectors\\processing\\test_pipeline.py:127: in test_pipeline_context_manager\n    @pytest.mark.asyncio\n                         \nsrc\\phoenix_real_estate\\collectors\\processing\\pipeline.py:170: in __aenter__\n    return self\nsrc\\phoenix_real_estate\\collectors\\processing\\pipeline.py:152: in initialize\n    ???\nE   phoenix_real_estate.foundation.utils.exceptions.ProcessingError: Pipeline initialization failed: unsupported operand type(s) for *: 'Mock' and 'int'"
            }
          ]
        },
        {
          "name": "test_pipeline_not_initialized",
          "fullName": "tests/collectors/processing/test_pipeline.py::TestDataProcessingPipeline::test_pipeline_not_initialized",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_pipeline_integration.py",
      "tests": [
        {
          "name": "test_pipeline_imports",
          "fullName": "tests/collectors/processing/test_pipeline_integration.py::TestPipelineIntegration::test_pipeline_imports",
          "state": "passed"
        },
        {
          "name": "test_pipeline_basic_functionality",
          "fullName": "tests/collectors/processing/test_pipeline_integration.py::TestPipelineIntegration::test_pipeline_basic_functionality",
          "state": "passed"
        },
        {
          "name": "test_processing_result_dataclass",
          "fullName": "tests/collectors/processing/test_pipeline_integration.py::TestPipelineIntegration::test_processing_result_dataclass",
          "state": "passed"
        },
        {
          "name": "test_pipeline_documentation",
          "fullName": "tests/collectors/processing/test_pipeline_integration.py::TestPipelineIntegration::test_pipeline_documentation",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_processing_validator.py",
      "tests": [
        {
          "name": "test_create_validation_result",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestValidationResult::test_create_validation_result",
          "state": "passed"
        },
        {
          "name": "test_validate_complete_data",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestProcessingValidator::test_validate_complete_data",
          "state": "passed"
        },
        {
          "name": "test_validate_missing_required_fields",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestProcessingValidator::test_validate_missing_required_fields",
          "state": "passed"
        },
        {
          "name": "test_validate_price_range",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestProcessingValidator::test_validate_price_range",
          "state": "passed"
        },
        {
          "name": "test_validate_data_consistency",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestProcessingValidator::test_validate_data_consistency",
          "state": "passed"
        },
        {
          "name": "test_custom_validation_rules",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestProcessingValidator::test_custom_validation_rules",
          "state": "passed"
        },
        {
          "name": "test_confidence_scoring",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestProcessingValidator::test_confidence_scoring",
          "state": "passed"
        },
        {
          "name": "test_validate_with_metadata",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestProcessingValidator::test_validate_with_metadata",
          "state": "passed"
        },
        {
          "name": "test_generate_validation_report",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestProcessingValidator::test_generate_validation_report",
          "state": "passed"
        },
        {
          "name": "test_batch_validation",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestProcessingValidator::test_batch_validation",
          "state": "passed"
        },
        {
          "name": "test_configuration_from_yaml",
          "fullName": "tests/collectors/processing/test_processing_validator.py::TestProcessingValidator::test_configuration_from_yaml",
          "state": "passed"
        }
      ]
    },
    {
      "moduleId": "tests/collectors/processing/test_resource_monitor.py",
      "tests": [
        {
          "name": "test_memory_monitoring",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceMonitor::test_memory_monitoring",
          "state": "passed"
        },
        {
          "name": "test_cpu_monitoring",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceMonitor::test_cpu_monitoring",
          "state": "passed"
        },
        {
          "name": "test_concurrent_request_limiting",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceMonitor::test_concurrent_request_limiting",
          "state": "passed"
        },
        {
          "name": "test_alert_generation",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceMonitor::test_alert_generation",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_resource_monitor.py:124: in test_alert_generation\n    assert alerts[0].current_value == 75\n    ^^^^^^^^^^^^^^^^^^^^^^^\nE   assert 0 == 1\nE    +  where 0 = len([])"
            }
          ]
        },
        {
          "name": "test_adaptive_batch_sizing",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceMonitor::test_adaptive_batch_sizing",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_resource_monitor.py:152: in test_adaptive_batch_sizing\n    with patch.object(monitor, '_get_memory_usage', return_value={\"percent\": 30}):\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   assert 1 < 1"
            }
          ]
        },
        {
          "name": "test_resource_reservation",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceMonitor::test_resource_reservation",
          "state": "passed"
        },
        {
          "name": "test_monitoring_persistence",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceMonitor::test_monitoring_persistence",
          "state": "passed"
        },
        {
          "name": "test_graceful_degradation",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceMonitor::test_graceful_degradation",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_resource_monitor.py:218: in test_graceful_degradation\n    class TestResourceMetrics:\n                ^^^^^^^^^^^^^^^\nE   AssertionError: assert 'healthy' == 'degraded'\nE     \nE     - degraded\nE     + healthy"
            }
          ]
        },
        {
          "name": "test_metrics_aggregation",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceMetrics::test_metrics_aggregation",
          "state": "passed"
        },
        {
          "name": "test_sliding_window",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceMetrics::test_sliding_window",
          "state": "passed"
        },
        {
          "name": "test_limit_validation",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceLimits::test_limit_validation",
          "state": "passed"
        },
        {
          "name": "test_dynamic_adjustment",
          "fullName": "tests/collectors/processing/test_resource_monitor.py::TestResourceLimits::test_dynamic_adjustment",
          "state": "failed",
          "errors": [
            {
              "message": "tests\\collectors\\processing\\test_resource_monitor.py:297: in test_dynamic_adjustment\n    class TestIntegrationWithPipeline:\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE   AssertionError: assert 778.24 > 778.24\nE    +  where 778.24 = ResourceLimits(max_memory_mb=1024, max_cpu_percent=80, max_concurrent_requests=10, max_queue_size=100, alert_thresholds={'memory': {'warning': 70, 'critical': 90}, 'cpu': {'warning': 60, 'critical': 80}, 'queue': {'warning': 50, 'critical': 80}}, dynamic_adjustment=True).effective_memory_limit\nE    +  and   778.24 = ResourceLimits(max_memory_mb=1024, max_cpu_percent=80, max_concurrent_requests=10, max_queue_size=100, alert_thresholds={'memory': {'warning': 70, 'critical': 90}, 'cpu': {'warning': 60, 'critical': 80}, 'queue': {'warning': 50, 'critical': 80}}, dynamic_adjustment=True).effective_memory_limit"
            }
          ]
        }
      ]
    }
  ]
}