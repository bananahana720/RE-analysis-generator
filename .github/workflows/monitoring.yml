name: System Monitoring & Budget Tracking

on:
  schedule:
    # Every 6 hours for budget monitoring
    - cron: '0 */6 * * *'
    # Weekly comprehensive system health check (Sundays at 1 AM UTC)
    - cron: '0 1 * * 0'
    # Dead man's switch - daily at 5 AM UTC
    - cron: '0 5 * * *'
  workflow_dispatch:
    inputs:
      monitoring_type:
        description: 'Type of monitoring to run'
        required: true
        type: choice
        options: ['budget', 'system-health', 'performance', 'comprehensive', 'dead-mans-switch']
        default: 'comprehensive'
      alert_threshold:
        description: 'Budget alert threshold (percentage)'
        required: false
        type: number
        default: 80
      send_notifications:
        description: 'Send notifications on issues'
        required: false
        type: boolean
        default: true

env:
  TEST_MONGODB_URL: mongodb://admin:${{ secrets.TEST_MONGODB_PASSWORD }}@localhost:27017/
  PYTHON_VERSION: "3.13"
  BUDGET_LIMIT_USD: 25
  ALERT_WEBHOOK_TIMEOUT: 30

concurrency:
  group: monitoring-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-secrets:
    name: Validate Production Secrets
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: production
    outputs:
      validation-status: ${{ steps.validation.outputs.status }}
    
    steps:
    - name: Validate Required Secrets
      id: validation
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        TEST_MONGODB_PASSWORD: ${{ secrets.TEST_MONGODB_PASSWORD }}
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
        CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
        MARICOPA_API_KEY: ${{ secrets.MARICOPA_API_KEY }}
      run: |
        missing_secrets=()
        
        # Check production secrets for monitoring
        [[ -z "$MONGODB_URL" ]] && missing_secrets+=("MONGODB_URL")
        [[ -z "$TEST_MONGODB_PASSWORD" ]] && missing_secrets+=("TEST_MONGODB_PASSWORD")
        [[ -z "$WEBSHARE_API_KEY" ]] && missing_secrets+=("WEBSHARE_API_KEY")
        [[ -z "$CAPTCHA_API_KEY" ]] && missing_secrets+=("CAPTCHA_API_KEY")
        [[ -z "$MARICOPA_API_KEY" ]] && missing_secrets+=("MARICOPA_API_KEY")
        
        if [ ${#missing_secrets[@]} -eq 0 ]; then
          echo "[OK] All required production secrets are configured"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "[FAIL] Missing required production secrets:"
          printf '%s\n' "${missing_secrets[@]}"
          echo ""
          echo "Please configure these secrets in:"
          echo "Repository Settings [?] Secrets and variables [?] Actions [?] Environment secrets [?] production"
          echo ""
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

  budget-monitoring:
    name: Budget & Cost Tracking
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.monitoring_type == 'budget' || github.event.inputs.monitoring_type == 'comprehensive'
    timeout-minutes: 15
    needs: validate-secrets
    environment: production
    secrets: inherit
    
    outputs:
      budget-status: ${{ steps.budget-check.outputs.status }}
      current-usage: ${{ steps.budget-check.outputs.current-usage }}
      usage-percentage: ${{ steps.budget-check.outputs.usage-percentage }}
      projected-monthly: ${{ steps.budget-check.outputs.projected-monthly }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Calculate GitHub Actions usage
      id: github-usage
      run: |
        # Calculate estimated GitHub Actions costs
        current_day=$(date +%d)
        days_in_month=$(date -d "$(date +%Y-%m-01) +1 month -1 day" +%d)
        
        # Estimate based on daily collection (10 min) + CI/CD usage
        daily_minutes=12  # 10 for collection + 2 for CI/CD
        monthly_estimate=$(( daily_minutes * days_in_month ))
        
        # GitHub Actions is free for public repos, but track usage
        actions_cost=0.00
        
        echo "daily-minutes=$daily_minutes" >> $GITHUB_OUTPUT
        echo "monthly-estimate=$monthly_estimate" >> $GITHUB_OUTPUT
        echo "actions-cost=$actions_cost" >> $GITHUB_OUTPUT
        
        echo "[METRICS] GitHub Actions Usage:"
        echo "  Daily: $daily_minutes minutes"
        echo "  Monthly Estimate: $monthly_estimate minutes"
        echo "  Cost: \$${actions_cost}"
    
    - name: Check MongoDB Atlas usage
      id: mongodb-usage
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
      run: |
        # MongoDB Atlas M0 (Free tier) - track usage
        mongodb_cost=0.00
        storage_usage="< 512MB"  # Free tier limit
        
        echo "mongodb-cost=$mongodb_cost" >> $GITHUB_OUTPUT
        echo "storage-usage=$storage_usage" >> $GITHUB_OUTPUT
        
        echo "[?][?] MongoDB Atlas Usage:"
        echo "  Tier: M0 (Free)"
        echo "  Storage: $storage_usage"
        echo "  Cost: \$${mongodb_cost}"
    
    - name: Check Ollama/LLM costs
      id: llm-usage
      run: |
        # Ollama is local/free - no direct costs
        llm_cost=0.00
        model_size="2GB"  # llama3.2:latest
        
        echo "llm-cost=$llm_cost" >> $GITHUB_OUTPUT
        echo "model-size=$model_size" >> $GITHUB_OUTPUT
        
        echo "[ROBOT] LLM Usage:"
        echo "  Provider: Ollama (Local)"
        echo "  Model: llama3.2:latest ($model_size)"
        echo "  Cost: \$${llm_cost}"
    
    - name: Check third-party service costs
      id: services-usage
      env:
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
        CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
      run: |
        # WebShare proxy (estimate based on usage)
        webshare_cost=2.50  # ~$2.50/month for 10 proxies
        
        # 2captcha service (estimate based on usage)  
        captcha_cost=1.00   # ~$1/month for occasional captcha solving
        
        # Maricopa API (free)
        maricopa_cost=0.00
        
        total_services_cost=$(python3 -c "print(f'{$webshare_cost + $captcha_cost:.2f}')")
        
        echo "webshare-cost=$webshare_cost" >> $GITHUB_OUTPUT
        echo "captcha-cost=$captcha_cost" >> $GITHUB_OUTPUT
        echo "maricopa-cost=$maricopa_cost" >> $GITHUB_OUTPUT
        echo "total-services-cost=$total_services_cost" >> $GITHUB_OUTPUT
        
        echo "[GLOBE] Third-party Services:"
        echo "  WebShare Proxies: \$${webshare_cost}"
        echo "  2captcha: \$${captcha_cost}"
        echo "  Maricopa API: \$${maricopa_cost}"
        echo "  Total: \$${total_services_cost}"
    
    - name: Calculate total budget usage
      id: budget-check
      run: |
        github_cost="${{ steps.github-usage.outputs.actions-cost }}"
        mongodb_cost="${{ steps.mongodb-usage.outputs.mongodb-cost }}"
        llm_cost="${{ steps.llm-usage.outputs.llm-cost }}"
        services_cost="${{ steps.services-usage.outputs.total-services-cost }}"
        
        total_current=$(python3 -c "print(f'{$github_cost + $mongodb_cost + $llm_cost + $services_cost:.2f}')")
        usage_percentage=$(python3 -c "print(f'{($github_cost + $mongodb_cost + $llm_cost + $services_cost) / ${{ env.BUDGET_LIMIT_USD }} * 100:.1f}')")
        
        # Determine status based on usage
        if (( $(echo "$usage_percentage >= 90" | bc -l) )); then
          status="critical"
        elif (( $(echo "$usage_percentage >= ${{ github.event.inputs.alert_threshold || 80 }}" | bc -l) )); then
          status="warning"
        else
          status="healthy"
        fi
        
        # Project monthly cost
        current_day=$(date +%-d)  # Remove leading zero
        days_in_month=$(date -d "$(date +%Y-%m-01) +1 month -1 day" +%-d)  # Remove leading zero
        projected_monthly=$(python3 -c "print(f'{($services_cost / $current_day) * $days_in_month:.2f}')")
        
        echo "status=$status" >> $GITHUB_OUTPUT
        echo "current-usage=$total_current" >> $GITHUB_OUTPUT
        echo "usage-percentage=$usage_percentage" >> $GITHUB_OUTPUT
        echo "projected-monthly=$projected_monthly" >> $GITHUB_OUTPUT
        
        echo "[MONEY] Budget Summary:"
        echo "  Current Usage: \$${total_current} / \${{ env.BUDGET_LIMIT_USD }}"
        echo "  Usage Percentage: ${usage_percentage}%"
        echo "  Status: $status"
        echo "  Projected Monthly: \$${projected_monthly}"
    
    - name: Generate budget report
      run: |
        mkdir -p reports
        cat << EOF > reports/budget-report.json
        {
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "budget_limit_usd": ${{ env.BUDGET_LIMIT_USD }},
          "current_usage_usd": ${{ steps.budget-check.outputs.current-usage }},
          "usage_percentage": ${{ steps.budget-check.outputs.usage-percentage }},
          "status": "${{ steps.budget-check.outputs.status }}",
          "projected_monthly_usd": ${{ steps.budget-check.outputs.projected-monthly }},
          "breakdown": {
            "github_actions": ${{ steps.github-usage.outputs.actions-cost }},
            "mongodb_atlas": ${{ steps.mongodb-usage.outputs.mongodb-cost }},
            "llm_processing": ${{ steps.llm-usage.outputs.llm-cost }},
            "webshare_proxies": ${{ steps.services-usage.outputs.webshare-cost }},
            "captcha_service": ${{ steps.services-usage.outputs.captcha-cost }},
            "maricopa_api": ${{ steps.services-usage.outputs.maricopa-cost }}
          },
          "usage_metrics": {
            "github_actions_minutes_daily": ${{ steps.github-usage.outputs.daily-minutes }},
            "github_actions_minutes_monthly": ${{ steps.github-usage.outputs.monthly-estimate }},
            "mongodb_storage": "${{ steps.mongodb-usage.outputs.storage-usage }}",
            "llm_model_size": "${{ steps.llm-usage.outputs.model-size }}"
          }
        }
        EOF
        
        echo "[OK] Budget report generated"
    
    - name: Upload budget artifacts
      uses: actions/upload-artifact@v4
      with:
        name: budget-report-${{ github.run_number }}
        path: reports/budget-report.json
        retention-days: 90

  system-health-monitoring:
    name: System Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.monitoring_type == 'system-health' || github.event.inputs.monitoring_type == 'comprehensive'
    timeout-minutes: 20
    needs: validate-secrets
    environment: production
    secrets: inherit
    
    outputs:
      system-status: ${{ steps.health-check.outputs.status }}
      mongodb-status: ${{ steps.mongodb-health.outputs.status }}
      ollama-status: ${{ steps.ollama-health.outputs.status }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Setup health check environment
      run: |
        mkdir -p {logs,reports,data/{raw,processed}}
        echo "[OK] Health check environment ready"
    
    - name: Check MongoDB health
      id: mongodb-health
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        TEST_MONGODB_PASSWORD: ${{ secrets.TEST_MONGODB_PASSWORD }}
      run: |
        if [[ -n "$MONGODB_URL" || -n "$TEST_MONGODB_PASSWORD" ]]; then
          # Try production URL first, fall back to test URL
          test_url="mongodb://admin:${TEST_MONGODB_PASSWORD}@localhost:27017/"
          target_url="${MONGODB_URL:-$test_url}"
          
          echo "Testing MongoDB connection..." > logs/mongodb-health.log
          if timeout 30 uv run python scripts/testing/test_mongodb_connection.py >> logs/mongodb-health.log 2>&1; then
            echo "status=healthy" >> $GITHUB_OUTPUT
            echo "[OK] MongoDB connection healthy"
          else
            echo "status=unhealthy" >> $GITHUB_OUTPUT
            echo "[FAIL] MongoDB connection failed"
            cat logs/mongodb-health.log
          fi
        else
          echo "status=not-configured" >> $GITHUB_OUTPUT
          echo "[WARN] MongoDB credentials not configured"
        fi
    
    - name: Setup and check Ollama health
      id: ollama-health
      run: |
        # Kill any existing Ollama processes to avoid port conflicts
        pkill -f ollama || true
        sleep 2
        
        # Install and start Ollama
        curl -fsSL https://ollama.ai/install.sh | sh
        ollama serve &
        sleep 15
        
        # Pull required model
        ollama pull llama3.2:latest
        
        # Test Ollama API with retry logic
        max_retries=5
        retry_count=0
        ollama_healthy=false
        
        while [[ $retry_count -lt $max_retries ]]; do
          if curl -s --max-time 10 http://localhost:11434/api/tags > /dev/null 2>&1; then
            ollama_healthy=true
            break
          fi
          echo "[HOURGLASS] Ollama not ready, retrying... ($((retry_count + 1))/$max_retries)"
          sleep 10
          retry_count=$((retry_count + 1))
        done
        
        if [[ "$ollama_healthy" == "true" ]]; then
          echo "status=healthy" >> $GITHUB_OUTPUT
          echo "[OK] Ollama service healthy"
        else
          echo "status=unhealthy" >> $GITHUB_OUTPUT
          echo "[FAIL] Ollama service failed after $max_retries attempts"
          # Show Ollama logs for debugging
          ps aux | grep ollama || true
          curl -v http://localhost:11434/api/tags || true
        fi
    
    - name: Check API endpoints health
      id: api-health
      env:
        MARICOPA_API_KEY: ${{ secrets.MARICOPA_API_KEY }}
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
      run: |
        maricopa_status="unknown"
        webshare_status="unknown"
        
        # Test Maricopa API (lightweight check)
        if [[ -n "$MARICOPA_API_KEY" ]]; then
          if timeout 10 curl -s -f "https://mcassessor.maricopa.gov/api/v1/parcels?limit=1" \
             -H "Authorization: $MARICOPA_API_KEY" > /dev/null 2>&1; then
            maricopa_status="healthy"
          else
            maricopa_status="unhealthy"
          fi
        else
          maricopa_status="not-configured"
        fi
        
        # Test WebShare proxy health
        if [[ -n "$WEBSHARE_API_KEY" ]]; then
          if timeout 10 curl -s -f "https://proxy.webshare.io/api/v2/proxy/list/?limit=1" \
             -H "Authorization: Token $WEBSHARE_API_KEY" > /dev/null 2>&1; then
            webshare_status="healthy"
          else
            webshare_status="unhealthy"
          fi
        else
          webshare_status="not-configured"
        fi
        
        echo "maricopa-status=$maricopa_status" >> $GITHUB_OUTPUT
        echo "webshare-status=$webshare_status" >> $GITHUB_OUTPUT
        
        echo "[GLOBE] API Health Status:"
        echo "  Maricopa API: $maricopa_status"
        echo "  WebShare Proxy: $webshare_status"
    
    - name: Run system validation tests
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        OLLAMA_URL: "http://localhost:11434"
      run: |
        # Run basic system validation
        uv run python scripts/validation/validate_system.py --quick-check > logs/system-validation.log 2>&1
        validation_exit_code=$?
        
        if [[ $validation_exit_code -eq 0 ]]; then
          echo "[OK] System validation passed"
        else
          echo "[FAIL] System validation failed"
        fi
        
        echo "validation-exit-code=$validation_exit_code" >> $GITHUB_ENV
    
    - name: Determine overall system health
      id: health-check
      run: |
        mongodb_status="${{ steps.mongodb-health.outputs.status }}"
        ollama_status="${{ steps.ollama-health.outputs.status }}"
        maricopa_status="${{ steps.api-health.outputs.maricopa-status }}"
        webshare_status="${{ steps.api-health.outputs.webshare-status }}"
        validation_code="${{ env.validation-exit-code }}"
        
        # Determine overall status
        if [[ "$mongodb_status" == "healthy" && "$ollama_status" == "healthy" && 
              "$maricopa_status" == "healthy" && "$validation_code" == "0" ]]; then
          overall_status="healthy"
        elif [[ "$mongodb_status" == "unhealthy" || "$ollama_status" == "unhealthy" || 
                "$maricopa_status" == "unhealthy" ]]; then
          overall_status="unhealthy"
        else
          overall_status="degraded"
        fi
        
        echo "status=$overall_status" >> $GITHUB_OUTPUT
        
        echo "[HOSPITAL] Overall System Health: $overall_status"
    
    - name: Generate health report
      run: |
        mkdir -p reports
        cat << EOF > reports/system-health.json
        {
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "overall_status": "${{ steps.health-check.outputs.status }}",
          "components": {
            "mongodb": "${{ steps.mongodb-health.outputs.status }}",
            "ollama": "${{ steps.ollama-health.outputs.status }}",
            "maricopa_api": "${{ steps.api-health.outputs.maricopa-status }}",
            "webshare_proxy": "${{ steps.api-health.outputs.webshare-status }}"
          },
          "validation": {
            "system_check_passed": $(if [[ "${{ env.validation-exit-code }}" == "0" ]]; then echo "true"; else echo "false"; fi)
          }
        }
        EOF
        
        echo "[OK] System health report generated"
    
    - name: Upload health check artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: system-health-report-${{ github.run_number }}
        path: |
          reports/system-health.json
          logs/mongodb-health.log
          logs/system-validation.log
        retention-days: 30

  performance-monitoring:
    name: Performance Metrics
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.monitoring_type == 'performance' || github.event.inputs.monitoring_type == 'comprehensive'
    timeout-minutes: 25
    needs: validate-secrets
    environment: production
    secrets: inherit
    
    services:
      mongodb:
        image: mongo:8.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.TEST_MONGODB_PASSWORD }}
        ports:
          - 27017:27017
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Setup Ollama for performance tests
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        ollama serve &
        sleep 15
        ollama pull llama3.2:latest
        echo "[OK] Ollama ready for performance monitoring"
    
    - name: Wait for services
      run: |
        timeout 60 bash -c 'until mongosh --host localhost:27017 --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'
        timeout 60 bash -c 'until curl -s http://localhost:11434/api/tags > /dev/null 2>&1; do sleep 2; done'
        echo "[OK] All services ready for performance monitoring"
    
    - name: Setup performance monitoring environment
      env:
        MONGODB_URL: ${{ env.TEST_MONGODB_URL }}
        OLLAMA_URL: http://localhost:11434
      run: |
        mkdir -p {data,logs,reports}/{raw,processed}
        echo "[OK] Performance monitoring environment setup"
    
    - name: Run performance benchmarks
      env:
        MONGODB_URL: ${{ env.TEST_MONGODB_URL }}
        OLLAMA_URL: http://localhost:11434
      run: |
        echo "[RUNNER] Running performance benchmarks..."
        
        # LLM processing performance
        start_time=$(date +%s)
        uv run python scripts/testing/test_performance_optimizations.py --benchmark > logs/llm-performance.log 2>&1
        llm_duration=$(( $(date +%s) - start_time ))
        
        # Database performance
        start_time=$(date +%s)
        uv run python scripts/testing/test_db_connection.py > logs/db-performance.log 2>&1
        db_duration=$(( $(date +%s) - start_time ))
        
        echo "Performance Results:"
        echo "  LLM Processing: ${llm_duration}s"
        echo "  Database Operations: ${db_duration}s"
        
        echo "llm-duration=$llm_duration" >> $GITHUB_ENV
        echo "db-duration=$db_duration" >> $GITHUB_ENV
    
    - name: Monitor resource usage
      run: |
        # Monitor system resources during performance test
        echo "[METRICS] Resource Usage Monitoring..."
        
        # CPU and memory usage
        cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | sed 's/%us,//')
        memory_usage=$(free | grep Mem | awk '{printf "%.1f", $3/$2 * 100.0}')
        
        # Disk usage
        disk_usage=$(df -h / | awk 'NR==2{printf "%s", $5}' | sed 's/%//')
        
        echo "Resource Usage:"
        echo "  CPU: ${cpu_usage}%"
        echo "  Memory: ${memory_usage}%"
        echo "  Disk: ${disk_usage}%"
        
        echo "cpu-usage=$cpu_usage" >> $GITHUB_ENV
        echo "memory-usage=$memory_usage" >> $GITHUB_ENV
        echo "disk-usage=$disk_usage" >> $GITHUB_ENV
    
    - name: Generate performance report
      run: |
        mkdir -p reports
        cat << EOF > reports/performance-metrics.json
        {
          "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "benchmarks": {
            "llm_processing_duration_seconds": ${{ env.llm-duration }},
            "database_operations_duration_seconds": ${{ env.db-duration }}
          },
          "resource_usage": {
            "cpu_percentage": "${{ env.cpu-usage }}",
            "memory_percentage": "${{ env.memory-usage }}",
            "disk_percentage": "${{ env.disk-usage }}"
          },
          "performance_status": "$(if [[ ${{ env.llm-duration }} -lt 60 && ${{ env.db-duration }} -lt 10 ]]; then echo "good"; else echo "degraded"; fi)"
        }
        EOF
        
        echo "[OK] Performance metrics report generated"
    
    - name: Upload performance artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-metrics-${{ github.run_number }}
        path: |
          reports/performance-metrics.json
          logs/llm-performance.log
          logs/db-performance.log
        retention-days: 30

  dead-mans-switch:
    name: Dead Man's Switch - Critical Workflow Monitor
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.monitoring_type == 'dead-mans-switch' || github.event.inputs.monitoring_type == 'comprehensive'
    timeout-minutes: 10
    needs: validate-secrets
    environment: production
    secrets: inherit
    
    outputs:
      critical-failures: ${{ steps.check-workflows.outputs.critical-failures }}
      warning-count: ${{ steps.check-workflows.outputs.warning-count }}
      last-success: ${{ steps.check-workflows.outputs.last-success }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Critical Data Collection Workflows
      id: check-workflows
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "## Dead Man's Switch Monitoring" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Checking critical workflows for the last 24 hours**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Get workflow run data for the last 24 hours
        cutoff_date=$(date -d "24 hours ago" -u +"%Y-%m-%dT%H:%M:%SZ")
        
        critical_failures=0
        warning_count=0
        last_success=""
        
        # Critical workflows to monitor
        critical_workflows=(
          "Production Data Collection"
          "Validate Secrets Configuration"  
          "System Monitoring & Budget Tracking"
        )
        
        for workflow_name in "${critical_workflows[@]}"; do
          echo "### Checking: $workflow_name"
          
          # Get recent runs for this workflow
          runs_json=$(gh api repos/${{ github.repository }}/actions/workflows \
            --jq ".workflows[] | select(.name == \"$workflow_name\") | .id" | head -1)
          
          if [[ -n "$runs_json" ]]; then
            workflow_id=$runs_json
            
            # Get latest runs
            recent_runs=$(gh api "repos/${{ github.repository }}/actions/workflows/$workflow_id/runs" \
              --jq ".workflow_runs[] | select(.created_at > \"$cutoff_date\") | {conclusion, status, created_at, html_url}" \
              | jq -s '.' || echo '[]')
            
            if [[ "$recent_runs" == "[]" ]]; then
              # No runs in last 24 hours - CRITICAL
              critical_failures=$((critical_failures + 1))
              echo "❌ CRITICAL: No runs in last 24 hours" >> $GITHUB_STEP_SUMMARY
              
              # Check last run regardless of time
              last_run=$(gh api "repos/${{ github.repository }}/actions/workflows/$workflow_id/runs" \
                --jq '.workflow_runs[0] | {conclusion, created_at, html_url}' 2>/dev/null || echo '{}')
              
              if [[ "$last_run" != "{}" ]]; then
                last_run_time=$(echo "$last_run" | jq -r '.created_at')
                last_run_url=$(echo "$last_run" | jq -r '.html_url')
                echo "  Last run: $last_run_time" >> $GITHUB_STEP_SUMMARY
                echo "  URL: $last_run_url" >> $GITHUB_STEP_SUMMARY
              fi
            else
              # Check run results
              failed_runs=$(echo "$recent_runs" | jq 'map(select(.conclusion == "failure")) | length')
              success_runs=$(echo "$recent_runs" | jq 'map(select(.conclusion == "success")) | length')
              total_runs=$(echo "$recent_runs" | jq 'length')
              
              if [[ $failed_runs -gt 0 && $success_runs -eq 0 ]]; then
                # All recent runs failed - CRITICAL
                critical_failures=$((critical_failures + 1))
                echo "❌ CRITICAL: All $total_runs recent runs failed" >> $GITHUB_STEP_SUMMARY
              elif [[ $failed_runs -gt 0 ]]; then
                # Some failures - WARNING  
                warning_count=$((warning_count + 1))
                echo "⚠️ WARNING: $failed_runs of $total_runs runs failed" >> $GITHUB_STEP_SUMMARY
              else
                echo "✅ HEALTHY: $success_runs successful runs" >> $GITHUB_STEP_SUMMARY
                if [[ -z "$last_success" ]]; then
                  latest_success=$(echo "$recent_runs" | jq -r 'map(select(.conclusion == "success")) | .[0].created_at // empty')
                  [[ -n "$latest_success" ]] && last_success="$latest_success"
                fi
              fi
              
              # Show recent run summary
              echo "$recent_runs" | jq -r '.[] | "  " + .created_at + " - " + (.conclusion // .status) + " - " + .html_url' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ WARNING: Workflow not found" >> $GITHUB_STEP_SUMMARY
            warning_count=$((warning_count + 1))
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
        done
        
        # Output results
        echo "critical-failures=$critical_failures" >> $GITHUB_OUTPUT
        echo "warning-count=$warning_count" >> $GITHUB_OUTPUT
        echo "last-success=$last_success" >> $GITHUB_OUTPUT
        
        # Summary
        echo "### Dead Man's Switch Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Critical Failures**: $critical_failures" >> $GITHUB_STEP_SUMMARY
        echo "- **Warnings**: $warning_count" >> $GITHUB_STEP_SUMMARY
        echo "- **Last Success**: ${last_success:-'Unknown'}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ $critical_failures -gt 0 ]]; then
          echo "🚨 **DEAD MAN'S SWITCH ACTIVATED** - Critical workflows are failing!" >> $GITHUB_STEP_SUMMARY
        elif [[ $warning_count -gt 0 ]]; then
          echo "⚠️ **WARNING** - Some workflow issues detected" >> $GITHUB_STEP_SUMMARY  
        else
          echo "✅ **ALL SYSTEMS OPERATIONAL** - Critical workflows healthy" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Validate Secret Health Status
      run: |
        echo "### Secret Health Check Integration" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Call the secret validation workflow to get current status
        validation_status="${{ needs.validate-secrets.outputs.validation-status }}"
        
        if [[ "$validation_status" == "failed" ]]; then
          echo "❌ **CRITICAL**: Secret validation is failing" >> $GITHUB_STEP_SUMMARY
          echo "  This may be the root cause of workflow failures" >> $GITHUB_STEP_SUMMARY
          echo "  Review secret configuration immediately" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **SECRET HEALTH**: Validation passing" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
    
    - name: Check GitHub Actions Quota
      run: |
        echo "### GitHub Actions Quota Check" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Get current usage (approximation based on recent runs)
        recent_usage=$(gh api "repos/${{ github.repository }}/actions/workflows/runs" \
          --jq '.workflow_runs[] | select(.created_at > "'$(date -d "1 month ago" -u +"%Y-%m-%dT%H:%M:%SZ")'") | .run_started_at' \
          | wc -l 2>/dev/null || echo "0")
        
        # Estimate minutes used (average 10 minutes per run)
        estimated_minutes=$((recent_usage * 10))
        quota_limit=2000  # Free tier limit
        usage_percentage=$((estimated_minutes * 100 / quota_limit))
        
        echo "- **Estimated Monthly Usage**: ${estimated_minutes}/${quota_limit} minutes (${usage_percentage}%)" >> $GITHUB_STEP_SUMMARY
        
        if [[ $usage_percentage -gt 80 ]]; then
          echo "⚠️ **WARNING**: GitHub Actions quota usage is high" >> $GITHUB_STEP_SUMMARY
          echo "  Consider optimizing workflows or upgrading plan" >> $GITHUB_STEP_SUMMARY
        else
          echo "✅ **QUOTA HEALTHY**: Usage within limits" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
    
    - name: Create Critical Dead Man's Switch Alert
      if: steps.check-workflows.outputs.critical-failures > 0
      uses: actions/github-script@v7
      with:
        script: |
          const criticalFailures = '${{ steps.check-workflows.outputs.critical-failures }}';
          const warningCount = '${{ steps.check-workflows.outputs.warning-count }}';
          const lastSuccess = '${{ steps.check-workflows.outputs.last-success }}';
          const runId = '${{ github.run_id }}';
          const serverUrl = '${{ github.server_url }}';
          const repo = '${{ github.repository }}';
          
          const issueBody = `
          ## 🚨 DEAD MAN'S SWITCH ACTIVATED - Critical Workflows Failing
          
          **Alert Type**: Dead Man's Switch - Critical System Failure
          **Critical Failures**: ${criticalFailures}
          **Warning Count**: ${warningCount}
          **Last Successful Run**: ${lastSuccess || 'Unknown'}
          **Detection Time**: ${new Date().toISOString()}
          **Monitoring Run**: [${runId}](${serverUrl}/${repo}/actions/runs/${runId})
          
          ### 🚨 IMMEDIATE ACTION REQUIRED
          
          Critical data collection and monitoring workflows have stopped functioning. This indicates a **potential 2+ day production outage scenario**.
          
          **This is a P0 incident - System may be DOWN.**
          
          ### Investigation Checklist
          
          - [ ] **Check Secret Configuration**: Verify all production secrets are configured and valid
          - [ ] **Review Recent Failures**: Examine failed workflow logs for error patterns  
          - [ ] **Test Service Connectivity**: Validate external service connections (MongoDB, APIs, proxies)
          - [ ] **Check System Resources**: Verify GitHub Actions quotas and runner availability
          - [ ] **Validate Dependencies**: Ensure all external dependencies are operational
          - [ ] **Test Manual Recovery**: Attempt manual workflow triggers to isolate issues
          
          ### Critical Workflows Affected
          
          - Production Data Collection (daily scheduled)
          - Secret Validation Monitoring (daily scheduled)  
          - System Health Monitoring (weekly scheduled)
          
          ### Escalation Path
          
          1. **Immediate (0-15 min)**: Check and fix secret configuration
          2. **Short term (15-60 min)**: Diagnose and resolve service connectivity issues
          3. **Medium term (1-4 hours)**: Full system recovery and validation
          4. **Long term (4+ hours)**: Post-incident review and prevention measures
          
          ### Recovery Actions
          
          \`\`\`bash
          # Quick diagnosis commands
          gh workflow run "validate-secrets.yml" --ref main
          gh workflow run "monitoring.yml" --ref main -f monitoring_type=comprehensive
          gh workflow run "data-collection-production.yml" --ref main -f collection_mode=test
          \`\`\`
          
          ### Success Criteria
          
          - [ ] All critical workflows returning to healthy state
          - [ ] Secret validation passing
          - [ ] Data collection resuming successfully
          - [ ] System monitoring operational
          - [ ] No additional dead man's switch alerts for 24 hours
          
          **⏰ SLA**: P0 incidents must be acknowledged within 15 minutes, resolved within 2 hours.
          
          ---
          
          **Auto-generated by**: Dead Man's Switch Monitoring System
          **Next Check**: In 24 hours (or run manually for immediate recheck)
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 DEAD MAN'S SWITCH: Critical Workflows Failing - ${new Date().toDateString()}`,
            body: issueBody,
            labels: ['critical', 'dead-mans-switch', 'p0-incident', 'production', 'monitoring', 'urgent', 'system-down']
          });
          
          console.log('Dead man\'s switch critical alert created');

  monitoring-summary:
    name: Monitoring Summary & Alerts
    runs-on: ubuntu-latest
    needs: [validate-secrets, budget-monitoring, system-health-monitoring, performance-monitoring, dead-mans-switch]
    if: always()
    environment: production
    secrets: inherit
    
    steps:
    - name: Determine alert level
      id: alert-level
      run: |
        budget_status="${{ needs.budget-monitoring.outputs.budget-status }}"
        system_status="${{ needs.system-health-monitoring.outputs.system-status }}"
        dead_mans_failures="${{ needs.dead-mans-switch.outputs.critical-failures || '0' }}"
        dead_mans_warnings="${{ needs.dead-mans-switch.outputs.warning-count || '0' }}"
        
        # Determine overall alert level
        if [[ "$budget_status" == "critical" || "$system_status" == "unhealthy" || $dead_mans_failures -gt 0 ]]; then
          alert_level="critical"
        elif [[ "$budget_status" == "warning" || "$system_status" == "degraded" || $dead_mans_warnings -gt 0 ]]; then
          alert_level="warning"
        else
          alert_level="info"
        fi
        
        echo "level=$alert_level" >> $GITHUB_OUTPUT
        echo "Overall alert level: $alert_level"
    
    - name: Create monitoring summary
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        # System Monitoring Summary
        
        **Monitoring Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Alert Level**: ${{ steps.alert-level.outputs.level }}
        
        ## Budget Status
        - **Current Usage**: \$${{ needs.budget-monitoring.outputs.current-usage || 'N/A' }} / \$${{ env.BUDGET_LIMIT_USD }}
        - **Usage Percentage**: ${{ needs.budget-monitoring.outputs.usage-percentage || 'N/A' }}%
        - **Status**: ${{ needs.budget-monitoring.outputs.budget-status || 'unknown' }}
        - **Projected Monthly**: \$${{ needs.budget-monitoring.outputs.projected-monthly || 'N/A' }}
        
        ## System Health
        - **Overall Status**: ${{ needs.system-health-monitoring.outputs.system-status || 'unknown' }}
        - **MongoDB**: ${{ needs.system-health-monitoring.outputs.mongodb-status || 'unknown' }}
        - **Ollama LLM**: ${{ needs.system-health-monitoring.outputs.ollama-status || 'unknown' }}
        
        ## Performance
        - **Monitoring**: ${{ needs.performance-monitoring.result || 'skipped' }}
        
        ## Dead Man's Switch
        - **Critical Failures**: ${{ needs.dead-mans-switch.outputs.critical-failures || '0' }}
        - **Warning Count**: ${{ needs.dead-mans-switch.outputs.warning-count || '0' }}
        - **Last Success**: ${{ needs.dead-mans-switch.outputs.last-success || 'Unknown' }}
        
        ## Next Monitoring
        - **Budget Check**: Every 6 hours
        - **System Health**: Weekly (Sundays)
        - **Comprehensive**: Weekly or on-demand
        EOF
    
    - name: Create alert issue on critical status
      if: steps.alert-level.outputs.level == 'critical' && github.event.inputs.send_notifications != 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const issueBody = `
          ## Critical System Alert
          
          **Alert Level**: Critical
          **Timestamp**: ${new Date().toISOString()}
          **Monitoring Run**: ${{ github.run_id }}
          
          ### Status Summary
          - **Budget Status**: ${{ needs.budget-monitoring.outputs.budget-status || 'unknown' }}
          - **System Health**: ${{ needs.system-health-monitoring.outputs.system-status || 'unknown' }}
          - **Current Usage**: \$${{ needs.budget-monitoring.outputs.current-usage || 'N/A' }} / \$${{ env.BUDGET_LIMIT_USD }}
          
          ### Immediate Actions Required
          - Review budget usage if over threshold
          - Check system health logs if services are down
          - Investigate performance issues if detected
          - Update monitoring thresholds if needed
          
          ### System Components
          - MongoDB: ${{ needs.system-health-monitoring.outputs.mongodb-status || 'unknown' }}
          - Ollama LLM: ${{ needs.system-health-monitoring.outputs.ollama-status || 'unknown' }}
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Critical System Alert - ${new Date().toDateString()}`,
            body: issueBody,
            labels: ['monitoring', 'alert', 'critical', 'urgent']
          });          });
    
    - name: Create success notification
      if: steps.alert-level.outputs.level \!= 'critical'
      run: |
        echo "[OK] System monitoring completed successfully"
        echo "Monitoring completed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "Alert level: ${{ steps.alert-level.outputs.level }}"
        echo "Budget usage: ${{ needs.budget-monitoring.outputs.current-usage || 'N/A' }} / ${{ env.BUDGET_LIMIT_USD }}"
        echo "System health: ${{ needs.system-health-monitoring.outputs.system-status || 'unknown' }}"
    
    - name: Upload monitoring notification artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: monitoring-summary-${{ github.run_number }}
        path: |
          reports/*.json
          logs/monitoring_*.log
        retention-days: 60
