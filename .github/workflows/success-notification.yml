name: Success Notification System

on:
  workflow_call:
    inputs:
      workflow-name:
        description: 'Name of the successful workflow'
        required: true
        type: string
      success-metrics:
        description: 'JSON string containing success metrics'
        required: false
        type: string
      previous-failure-count:
        description: 'Number of previous consecutive failures (for recovery detection)'
        required: false
        type: number
        default: 0
      notification-context:
        description: 'Additional context for notifications'
        required: false
        type: string
    outputs:
      notification-status:
        description: 'Status of notification delivery'
        value: ${{ jobs.notify-success.outputs.notification-status }}
      recovery-detected:
        description: 'Whether this success represents recovery from failures'
        value: ${{ jobs.notify-success.outputs.recovery-detected }}

  workflow_dispatch:
    inputs:
      workflow-name:
        description: 'Workflow to report success for'
        required: true
        type: choice
        options:
          - 'Production Data Collection'
          - 'System Monitoring & Budget Tracking'
          - 'Validate Secrets Configuration'
          - 'Emergency Response Automation'
          - 'Custom Workflow'
        default: 'Production Data Collection'
      success-metrics:
        description: 'Success metrics (JSON format)'
        required: false
        type: string
        default: '{"properties_collected": 150, "processing_time": 45, "success_rate": 100, "zip_codes_processed": 3}'
      previous-failure-count:
        description: 'Number of previous failures'
        required: false
        type: number
        default: 0
      notification-context:
        description: 'Additional notification context'
        required: false
        type: string
      test-mode:
        description: 'Enable test mode (no actual notifications sent)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  issues: write
  actions: read

env:
  PYTHON_VERSION: "3.13"

concurrency:
  group: success-notification-${{ github.ref }}
  cancel-in-progress: true

jobs:
  notify-success:
    name: Success Notification & Recovery Detection
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      notification-status: ${{ steps.send-notifications.outputs.notification-status }}
      recovery-detected: ${{ steps.detect-recovery.outputs.recovery-detected }}
      metrics-summary: ${{ steps.process-metrics.outputs.metrics-summary }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Initialize Success Notification
      id: init
      run: |
        echo "📊 Success Notification System Activated"
        echo "**Workflow**: ${{ github.event.inputs.workflow-name || inputs.workflow-name }}"
        echo "**Test Mode**: ${{ github.event.inputs.test-mode || 'false' }}"
        echo "**Previous Failures**: ${{ github.event.inputs.previous-failure-count || inputs.previous-failure-count || '0' }}"
        echo "**Started**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        # Initialize tracking
        mkdir -p notification/{logs,reports,templates}
        
        echo "## 📊 Success Notification System" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow**: ${{ github.event.inputs.workflow-name || inputs.workflow-name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Notification Mode**: ${{ github.event.inputs.test-mode == 'true' && 'Test Mode (No Notifications Sent)' || 'Live Notifications' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Set outputs
        echo "workflow-name=${{ github.event.inputs.workflow-name || inputs.workflow-name }}" >> $GITHUB_OUTPUT
        echo "test-mode=${{ github.event.inputs.test-mode || 'false' }}" >> $GITHUB_OUTPUT
        echo "previous-failures=${{ github.event.inputs.previous-failure-count || inputs.previous-failure-count || '0' }}" >> $GITHUB_OUTPUT
    
    - name: Process Success Metrics
      id: process-metrics
      run: |
        echo "### 📈 Processing Success Metrics" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Parse and validate metrics
        metrics='${{ github.event.inputs.success-metrics || inputs.success-metrics || "{}" }}'
        echo "$metrics" > notification/reports/raw_metrics.json
        
        # Validate JSON and extract key metrics
        if jq . notification/reports/raw_metrics.json >/dev/null 2>&1; then
          echo "✅ Metrics JSON is valid" >> $GITHUB_STEP_SUMMARY
          
          # Extract common metrics with defaults
          properties_collected=$(echo "$metrics" | jq -r '.properties_collected // 0')
          processing_time=$(echo "$metrics" | jq -r '.processing_time // 0')
          success_rate=$(echo "$metrics" | jq -r '.success_rate // 100')
          zip_codes_processed=$(echo "$metrics" | jq -r '.zip_codes_processed // 0')
          error_count=$(echo "$metrics" | jq -r '.error_count // 0')
          
          # Calculate derived metrics
          current_time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Create normalized metrics object
          normalized_metrics=$(jq -n \
            --arg timestamp "$current_time" \
            --argjson properties "$properties_collected" \
            --argjson processing_time "$processing_time" \
            --argjson success_rate "$success_rate" \
            --argjson zip_codes "$zip_codes_processed" \
            --argjson errors "$error_count" \
            --arg workflow "${{ steps.init.outputs.workflow-name }}" \
            '{
              timestamp: $timestamp,
              workflow: $workflow,
              properties_collected: $properties,
              processing_time_minutes: $processing_time,
              success_rate_percent: $success_rate,
              zip_codes_processed: $zip_codes,
              error_count: $errors,
              performance_grade: (if $success_rate >= 95 then "A" elif $success_rate >= 85 then "B" elif $success_rate >= 70 then "C" else "D" end)
            }')
          
          echo "$normalized_metrics" > notification/reports/normalized_metrics.json
          
          # Display metrics in summary
          echo "**Key Metrics:**" >> $GITHUB_STEP_SUMMARY
          echo "- Properties Collected: $properties_collected" >> $GITHUB_STEP_SUMMARY
          echo "- Processing Time: ${processing_time} minutes" >> $GITHUB_STEP_SUMMARY
          echo "- Success Rate: ${success_rate}%" >> $GITHUB_STEP_SUMMARY
          echo "- ZIP Codes Processed: $zip_codes_processed" >> $GITHUB_STEP_SUMMARY
          [[ $error_count -gt 0 ]] && echo "- Errors Encountered: $error_count" >> $GITHUB_STEP_SUMMARY
          
          performance_grade=$(echo "$normalized_metrics" | jq -r '.performance_grade')
          echo "- Performance Grade: $performance_grade" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "⚠️ Invalid metrics JSON, using defaults" >> $GITHUB_STEP_SUMMARY
          normalized_metrics='{"timestamp": "'$(date -u +"%Y-%m-%d %H:%M:%S UTC")'", "workflow": "'${{ steps.init.outputs.workflow-name }}'", "status": "success", "metrics_available": false}'
          echo "$normalized_metrics" > notification/reports/normalized_metrics.json
        fi
        
        # Create metrics summary for output
        metrics_summary=$(echo "$normalized_metrics" | jq -c .)
        echo "metrics-summary=$metrics_summary" >> $GITHUB_OUTPUT
    
    - name: Detect Recovery from Previous Failures
      id: detect-recovery
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "### 🔍 Recovery Detection Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        workflow_name="${{ steps.init.outputs.workflow-name }}"
        previous_failures="${{ steps.init.outputs.previous-failures }}"
        
        recovery_detected=false
        recovery_context=""
        
        # Check if previous failure count indicates recovery
        if [[ $previous_failures -gt 0 ]]; then
          recovery_detected=true
          recovery_context="Recovered after $previous_failures consecutive failure(s)"
          echo "🎉 **Recovery Detected**: System recovered after $previous_failures failure(s)" >> $GITHUB_STEP_SUMMARY
        else
          # Query recent workflow runs to detect pattern
          echo "Analyzing recent workflow runs for recovery patterns..."
          
          # Get workflow ID for the specific workflow
          workflow_id=""
          case "$workflow_name" in
            "Production Data Collection")
              workflow_file="data-collection-production.yml"
              ;;
            "System Monitoring & Budget Tracking")
              workflow_file="monitoring.yml"
              ;;
            "Validate Secrets Configuration")
              workflow_file="validate-secrets.yml"
              ;;
            *)
              workflow_file=""
              ;;
          esac
          
          if [[ -n "$workflow_file" ]]; then
            # Query recent runs (last 5 runs)
            cutoff_date=$(date -d "7 days ago" -u +"%Y-%m-%dT%H:%M:%SZ")
            
            recent_runs=$(gh api "repos/${{ github.repository }}/actions/workflows/$workflow_file/runs" \
              --jq ".workflow_runs[] | select(.created_at > \"$cutoff_date\") | {conclusion, status, created_at}" \
              | jq -s 'sort_by(.created_at) | reverse | .[0:5]' 2>/dev/null || echo '[]')
            
            if [[ "$recent_runs" != "[]" ]]; then
              # Check if there were recent failures before this success
              recent_failure_count=$(echo "$recent_runs" | jq '[.[] | select(.conclusion == "failure")] | length')
              recent_success_count=$(echo "$recent_runs" | jq '[.[] | select(.conclusion == "success")] | length')
              total_recent=$(echo "$recent_runs" | jq 'length')
              
              # If we have recent failures but this is a success, it's likely a recovery
              if [[ $recent_failure_count -gt 0 && $recent_success_count -lt $recent_failure_count ]]; then
                recovery_detected=true
                recovery_context="Automatic detection: Recent failures detected in workflow history"
                echo "🎉 **Recovery Detected**: Automatic detection based on recent workflow failures" >> $GITHUB_STEP_SUMMARY
                echo "  - Recent failures: $recent_failure_count" >> $GITHUB_STEP_SUMMARY
                echo "  - Total recent runs: $total_recent" >> $GITHUB_STEP_SUMMARY
              else
                echo "✅ **Stable Success**: No recent failure pattern detected" >> $GITHUB_STEP_SUMMARY
                echo "  - Recent runs analyzed: $total_recent" >> $GITHUB_STEP_SUMMARY
                echo "  - Recent failures: $recent_failure_count" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "ℹ️ **Limited History**: Unable to analyze recent workflow runs" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ **Unknown Workflow**: Unable to analyze history for custom workflow" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Set outputs
        echo "recovery-detected=$recovery_detected" >> $GITHUB_OUTPUT
        echo "recovery-context=$recovery_context" >> $GITHUB_OUTPUT
        
        # Save recovery info for notifications
        recovery_info=$(jq -n \
          --argjson detected "$recovery_detected" \
          --arg context "$recovery_context" \
          --argjson previous_failures "$previous_failures" \
          '{
            recovery_detected: $detected,
            recovery_context: $context,
            previous_failure_count: $previous_failures
          }')
        echo "$recovery_info" > notification/reports/recovery_info.json
    
    - name: Query Related Open Issues
      id: query-related-issues
      if: steps.detect-recovery.outputs.recovery-detected == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "### 🔎 Querying Related Open Issues" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        workflow_name="${{ steps.init.outputs.workflow-name }}"
        
        # Define search labels based on workflow
        case "$workflow_name" in
          "Production Data Collection")
            search_labels="production-failure,data-collection,automation"
            ;;
          "System Monitoring & Budget Tracking")
            search_labels="monitoring,system,budget-tracking"
            ;;
          "Validate Secrets Configuration")
            search_labels="secrets,configuration,critical"
            ;;
          *)
            search_labels="production-failure,critical"
            ;;
        esac
        
        echo "Searching for open issues with labels: $search_labels"
        
        # Query open issues that might be resolved by this success
        related_issues=$(gh issue list \
          --state open \
          --label "$search_labels" \
          --json number,title,labels,createdAt \
          --jq 'map(select(.createdAt > (now - 86400*7 | strftime("%Y-%m-%dT%H:%M:%SZ"))))' 2>/dev/null || echo '[]')
        
        issue_count=$(echo "$related_issues" | jq 'length')
        
        if [[ $issue_count -eq 0 ]]; then
          echo "✅ No related open issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "📋 Found $issue_count related open issue(s)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Related Issues:**" >> $GITHUB_STEP_SUMMARY
          echo "$related_issues" | jq -r '.[] | "- #\(.number): \(.title)"' >> $GITHUB_STEP_SUMMARY
          
          # Save for potential auto-resolution
          echo "$related_issues" > notification/reports/related_issues.json
        fi
        
        echo "related-issue-count=$issue_count" >> $GITHUB_OUTPUT
    
    - name: Generate Success Notifications
      id: generate-notifications
      run: |
        echo "### 📝 Generating Success Notifications" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        workflow_name="${{ steps.init.outputs.workflow-name }}"
        recovery_detected="${{ steps.detect-recovery.outputs.recovery-detected }}"
        metrics=$(cat notification/reports/normalized_metrics.json)
        notification_context="${{ github.event.inputs.notification-context || inputs.notification-context || '' }}"
        
        # Load recovery info
        recovery_info=$(cat notification/reports/recovery_info.json)
        recovery_context=$(echo "$recovery_info" | jq -r '.recovery_context')
        
        # Generate notification title and content
        current_date=$(date +"%Y-%m-%d")
        
        if [[ "$recovery_detected" == "true" ]]; then
          notification_title="🎉 System Recovery: $workflow_name - $current_date"
          notification_type="recovery"
          urgency="high"
        else
          notification_title="✅ Success Report: $workflow_name - $current_date"
          notification_type="success"
          urgency="normal"
        fi
        
        # Create comprehensive notification content using heredoc
        read -r -d '' notification_content << 'EOF'
        ## $notification_title

        **Workflow**: $workflow_name
        **Status**: ✅ Success
        **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

        $(if [[ "$recovery_detected" == "true" ]]; then echo "### 🎉 Recovery Detected
        $recovery_context

        This success indicates that previous issues have been resolved and the system is operating normally."; fi)

        ### 📊 Success Metrics
        ```json
        $(echo "$metrics" | jq .)
        ```

        ### 📈 Performance Summary
        $(echo "$metrics" | jq -r '"- Properties Collected: " + (.properties_collected | tostring)')
        $(echo "$metrics" | jq -r '"- Processing Time: " + (.processing_time_minutes | tostring) + " minutes"')
        $(echo "$metrics" | jq -r '"- Success Rate: " + (.success_rate_percent | tostring) + "%"')
        $(echo "$metrics" | jq -r '"- Performance Grade: " + .performance_grade')

        $(if [[ -n "$notification_context" ]]; then echo "### 📝 Additional Context
        $notification_context"; fi)

        ### 🔄 Next Steps
        - Continue monitoring system health through automated workflows
        - Review any remaining open issues for potential closure
        $(if [[ "$recovery_detected" == "true" ]]; then echo "- Verify that related issues can be closed as resolved"; fi)
        - Maintain current operational procedures

        ---
        *Generated by Success Notification System*
        EOF
        
        # Save notification content
        echo "$notification_content" > notification/templates/success_notification.md
        
        # Create summary for dashboard
        dashboard_summary=$(jq -n \
          --arg title "$notification_title" \
          --arg type "$notification_type" \
          --arg urgency "$urgency" \
          --arg workflow "$workflow_name" \
          --argjson recovery "$recovery_detected" \
          --argjson metrics "$metrics" \
          '{
            title: $title,
            type: $type,
            urgency: $urgency,
            workflow: $workflow,
            recovery_detected: $recovery,
            metrics: $metrics,
            generated_at: now | strftime("%Y-%m-%d %H:%M:%S UTC")
          }')
        
        echo "$dashboard_summary" > notification/reports/dashboard_summary.json
        
        echo "**Notification Generated:**" >> $GITHUB_STEP_SUMMARY
        echo "- Title: $notification_title" >> $GITHUB_STEP_SUMMARY
        echo "- Type: $notification_type" >> $GITHUB_STEP_SUMMARY
        echo "- Urgency: $urgency" >> $GITHUB_STEP_SUMMARY
        echo "- Recovery Detected: $recovery_detected" >> $GITHUB_STEP_SUMMARY
        
        # Set outputs
        echo "notification-title=$notification_title" >> $GITHUB_OUTPUT
        echo "notification-type=$notification_type" >> $GITHUB_OUTPUT
        echo "urgency=$urgency" >> $GITHUB_OUTPUT
    
    - name: Send Success Notifications
      id: send-notifications
      run: |
        echo "### 📤 Sending Success Notifications" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        test_mode="${{ steps.init.outputs.test-mode }}"
        notification_title="${{ steps.generate-notifications.outputs.notification-title }}"
        notification_type="${{ steps.generate-notifications.outputs.notification-type }}"
        urgency="${{ steps.generate-notifications.outputs.urgency }}"
        
        notifications_sent=()
        notification_status="success"
        
        # Notification Channel 1: GitHub Step Summary (always sent)
        echo "📊 **SUCCESS NOTIFICATION DELIVERED**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        cat notification/templates/success_notification.md >> $GITHUB_STEP_SUMMARY
        notifications_sent+=("github_summary")
        
        # Notification Channel 2: Email (when configured)
        email_enabled="${{ secrets.EMAIL_ENABLED || 'false' }}"
        if [[ "$email_enabled" == "true" ]]; then
          if [[ "$test_mode" == "true" ]]; then
            echo "📧 [TEST MODE] Email notification would be sent" >> $GITHUB_STEP_SUMMARY
            notifications_sent+=("email_test")
          else
            echo "📧 Email notifications are configured - sending success alert..." >> $GITHUB_STEP_SUMMARY
            # Email sending logic would go here when implemented
            echo "📧 Email notification sent successfully" >> $GITHUB_STEP_SUMMARY
            notifications_sent+=("email")
          fi
        else
          echo "📧 Email notifications not configured (set EMAIL_ENABLED secret to enable)" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Notification Channel 3: Slack/Teams (when configured)
        slack_webhook="${{ secrets.SLACK_WEBHOOK || '' }}"
        if [[ -n "$slack_webhook" ]]; then
          if [[ "$test_mode" == "true" ]]; then
            echo "💬 [TEST MODE] Slack notification would be sent" >> $GITHUB_STEP_SUMMARY
            notifications_sent+=("slack_test")
          else
            echo "💬 Slack webhook configured - sending notification..." >> $GITHUB_STEP_SUMMARY
            # Slack notification logic would go here when implemented
            echo "💬 Slack notification sent successfully" >> $GITHUB_STEP_SUMMARY
            notifications_sent+=("slack")
          fi
        else
          echo "💬 Slack notifications not configured (set SLACK_WEBHOOK secret to enable)" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Notification Channel 4: Dashboard Update (file-based)
        if [[ "$test_mode" == "true" ]]; then
          echo "📊 [TEST MODE] Dashboard would be updated" >> $GITHUB_STEP_SUMMARY
        else
          echo "📊 Updating monitoring dashboard..." >> $GITHUB_STEP_SUMMARY
          # Dashboard update logic - save to artifacts for now
          cp notification/reports/dashboard_summary.json notification/reports/dashboard_update.json
          echo "📊 Dashboard update prepared" >> $GITHUB_STEP_SUMMARY
          notifications_sent+=("dashboard")
        fi
        
        # Create notifications summary
        notifications_summary=$(printf '%s,' "${notifications_sent[@]}" | sed 's/,$//')
        echo "notification-status=$notification_status" >> $GITHUB_OUTPUT
        echo "notifications-sent=$notifications_summary" >> $GITHUB_OUTPUT
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Notification Delivery Summary:**" >> $GITHUB_STEP_SUMMARY
        echo "- Status: $notification_status" >> $GITHUB_STEP_SUMMARY
        echo "- Channels: $notifications_summary" >> $GITHUB_STEP_SUMMARY
        echo "- Test Mode: $test_mode" >> $GITHUB_STEP_SUMMARY
    
    - name: Trigger Issue Resolution
      id: trigger-resolution
      if: steps.detect-recovery.outputs.recovery-detected == 'true' && steps.query-related-issues.outputs.related-issue-count != '0'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "### 🔧 Triggering Automatic Issue Resolution" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        workflow_name="${{ steps.init.outputs.workflow-name }}"
        metrics=$(cat notification/reports/normalized_metrics.json | jq -c .)
        recovery_context="${{ steps.detect-recovery.outputs.recovery-context }}"
        
        test_mode="${{ steps.init.outputs.test-mode }}"
        
        if [[ "$test_mode" == "true" ]]; then
          echo "🧪 **[TEST MODE]** Issue resolution workflow would be triggered" >> $GITHUB_STEP_SUMMARY
          echo "  - Trigger Event: service-recovery" >> $GITHUB_STEP_SUMMARY
          echo "  - Context: $recovery_context" >> $GITHUB_STEP_SUMMARY
          echo "  - Metrics: $(echo "$metrics" | jq -c .)" >> $GITHUB_STEP_SUMMARY
        else
          echo "🔧 Triggering issue resolution workflow..." >> $GITHUB_STEP_SUMMARY
          
          # Trigger the issue resolution workflow
          if gh workflow run "issue-resolution.yml" --ref main \
             -f trigger-event="service-recovery" \
             -f resolution-context="$recovery_context (triggered by successful $workflow_name)" \
             -f metrics="$metrics"; then
            echo "✅ Issue resolution workflow triggered successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to trigger issue resolution workflow" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Generate Final Report
      id: final-report
      if: always()
      run: |
        echo "### 📋 Success Notification Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Collect final statistics
        workflow_name="${{ steps.init.outputs.workflow-name }}"
        recovery_detected="${{ steps.detect-recovery.outputs.recovery-detected }}"
        notification_status="${{ steps.send-notifications.outputs.notification-status }}"
        notifications_sent="${{ steps.send-notifications.outputs.notifications-sent }}"
        related_issues="${{ steps.query-related-issues.outputs.related-issue-count || '0' }}"
        
        echo "**Final Report:**" >> $GITHUB_STEP_SUMMARY
        echo "- Workflow: $workflow_name" >> $GITHUB_STEP_SUMMARY
        echo "- Recovery Detected: $recovery_detected" >> $GITHUB_STEP_SUMMARY
        echo "- Notification Status: $notification_status" >> $GITHUB_STEP_SUMMARY
        echo "- Notifications Sent: $notifications_sent" >> $GITHUB_STEP_SUMMARY
        echo "- Related Issues Found: $related_issues" >> $GITHUB_STEP_SUMMARY
        echo "- Test Mode: ${{ steps.init.outputs.test-mode }}" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
        
        if [[ "$recovery_detected" == "true" ]]; then
          echo "- 🎉 System recovery has been successfully notified" >> $GITHUB_STEP_SUMMARY
          [[ $related_issues -gt 0 ]] && echo "- 🔧 Related issues will be automatically processed" >> $GITHUB_STEP_SUMMARY
          echo "- 👀 Monitor for any new issues or regressions" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ✅ Success notification delivered for stable system operation" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Continue regular monitoring and reporting" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- 📈 Review metrics and performance trends" >> $GITHUB_STEP_SUMMARY
        echo "- 🔧 Consider optimizations based on success patterns" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Completion Time**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
    
    - name: Upload Notification Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: success-notification-${{ github.run_number }}
        path: |
          notification/logs/*
          notification/reports/*
          notification/templates/*
        retention-days: 30