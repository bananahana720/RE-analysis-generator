name: Daily Real Estate Data Collection

on:
  schedule:
    # Daily at 3 AM Phoenix time (10 AM UTC)
    - cron: '0 10 * * *'
  workflow_dispatch:
    inputs:
      zip_codes:
        description: 'Override ZIP codes (comma-separated)'
        required: false
        type: string
        default: '85031,85033,85035'
      collection_mode:
        description: 'Collection mode'
        required: false
        type: choice
        options: ['full', 'incremental', 'test']
        default: 'incremental'
      force_llm_processing:
        description: 'Force LLM processing for all properties'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  issues: write

env:
  TEST_MONGODB_URL: mongodb://admin:${{ secrets.TEST_MONGODB_PASSWORD }}@localhost:27017/
  PYTHON_VERSION: "3.13"
  OLLAMA_VERSION: "latest"
  COLLECTION_TIMEOUT_MINUTES: 75

concurrency:
  group: data-collection-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate-secrets:
    name: Validate Production Secrets
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: production
    outputs:
      validation-status: ${{ steps.validation.outputs.status }}
    
    steps:
    - name: Validate Required Secrets
      id: validation
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        MARICOPA_API_KEY: ${{ secrets.MARICOPA_API_KEY }}
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
        CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
      run: |
        missing_secrets=()
        
        # Check production secrets
        [[ -z "$MONGODB_URL" ]] && missing_secrets+=("MONGODB_URL")
        [[ -z "$MARICOPA_API_KEY" ]] && missing_secrets+=("MARICOPA_API_KEY")
        [[ -z "$WEBSHARE_API_KEY" ]] && missing_secrets+=("WEBSHARE_API_KEY")
        [[ -z "$CAPTCHA_API_KEY" ]] && missing_secrets+=("CAPTCHA_API_KEY")
        
        if [ ${#missing_secrets[@]} -eq 0 ]; then
          echo "[OK] All required production secrets are configured"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "[FAIL] Missing required production secrets:"
          printf '%s\n' "${missing_secrets[@]}"
          echo ""
          echo "Please configure these secrets in:"
          echo "Repository Settings [?] Secrets and variables [?] Actions [?] Environment secrets [?] production"
          echo ""
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

  pre-collection-setup:
    name: Pre-Collection Setup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-secrets
    environment: production
    secrets: inherit
    
    outputs:
      collection-mode: ${{ steps.config.outputs.collection-mode }}
      zip-codes: ${{ steps.config.outputs.zip-codes }}
      estimated-runtime: ${{ steps.config.outputs.estimated-runtime }}
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Configure collection parameters
      id: config
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "collection-mode=${{ github.event.inputs.collection_mode }}" >> $GITHUB_OUTPUT
          # Convert comma-separated zip codes to JSON array
          zip_codes="${{ github.event.inputs.zip_codes }}"
          json_array=$(echo "$zip_codes" | awk -F',' '{printf "["; for(i=1;i<=NF;i++) printf "%s\"%s\"", (i>1?",":""), $i; printf "]"}')
          echo "zip-codes=$json_array" >> $GITHUB_OUTPUT
        else
          echo "collection-mode=incremental" >> $GITHUB_OUTPUT
          echo 'zip-codes=["85031","85033","85035"]' >> $GITHUB_OUTPUT
        fi
        echo "estimated-runtime=60" >> $GITHUB_OUTPUT
    
    - name: Validate environment configuration
      env:
        MARICOPA_API_KEY: ${{ secrets.MARICOPA_API_KEY }}
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
        CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
      run: |
        uv run python scripts/workflow_validator.py validate data-collection
        echo "[OK] Environment validation passed"
    
    - name: Check service health
      run: |
        uv run python scripts/testing/verify_e2e_setup.py --quick-check
        echo "[OK] Service health check completed"

  maricopa-collection:
    name: Maricopa County Data Collection
    runs-on: ubuntu-latest
    needs: [validate-secrets, pre-collection-setup]
    timeout-minutes: 30
    environment: production
    secrets: inherit
    
    strategy:
      matrix:
        zip_code: ${{ fromJson(needs.pre-collection-setup.outputs.zip-codes) }}
      fail-fast: false
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Setup collection environment
      env:
        MARICOPA_API_KEY: ${{ secrets.MARICOPA_API_KEY }}
        ZIP_CODE: ${{ matrix.zip_code }}
        COLLECTION_MODE: ${{ needs.pre-collection-setup.outputs.collection-mode }}
      run: |
        mkdir -p data/processed data/raw logs
        echo "[OK] Collection environment setup for ZIP code $ZIP_CODE"
    
    - name: Execute Maricopa API collection
      env:
        MARICOPA_API_KEY: ${{ secrets.MARICOPA_API_KEY }}
        ZIP_CODE: ${{ matrix.zip_code }}
        COLLECTION_MODE: ${{ needs.pre-collection-setup.outputs.collection-mode }}
      run: |
        uv run python scripts/testing/test_maricopa_collector.py --zip-code "$ZIP_CODE" --mode "$COLLECTION_MODE"
      timeout-minutes: 25
    
    - name: Upload Maricopa collection artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: maricopa-collection-${{ matrix.zip_code }}-${{ github.run_number }}
        path: |
          data/raw/maricopa_*.json
          logs/maricopa_*.log
        retention-days: 7

  phoenix-mls-collection:
    name: Phoenix MLS Data Collection  
    runs-on: ubuntu-latest
    needs: [validate-secrets, pre-collection-setup]
    timeout-minutes: 45
    environment: production
    secrets: inherit
    
    services:
      # Use Playwright for browser automation
      playwright:
        image: mcr.microsoft.com/playwright:v1.40.0-focal
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Install Playwright browsers
      run: |
        uv run playwright install chromium
        uv run playwright install-deps
    
    - name: Setup Phoenix MLS environment
      env:
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
        CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
        ZIP_CODES: ${{ needs.pre-collection-setup.outputs.zip-codes }}
        COLLECTION_MODE: ${{ needs.pre-collection-setup.outputs.collection-mode }}
      run: |
        mkdir -p data/{processed,raw,cookies} logs
        echo "[OK] Phoenix MLS environment setup"
    
    - name: Execute Phoenix MLS scraping
      env:
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
        CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
        ZIP_CODES: ${{ needs.pre-collection-setup.outputs.zip-codes }}
        COLLECTION_MODE: ${{ needs.pre-collection-setup.outputs.collection-mode }}
      run: |
        uv run python scripts/testing/test_phoenix_mls_with_services.py --zip-codes "$ZIP_CODES" --mode "$COLLECTION_MODE"
      timeout-minutes: 40
    
    - name: Upload Phoenix MLS artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: phoenix-mls-collection-${{ github.run_number }}
        path: |
          data/raw/phoenix_mls_*.json
          data/raw/phoenix_mls_*.html
          data/cookies/phoenix_mls_session.pkl
          logs/phoenix_mls_*.log
        retention-days: 7

  llm-data-processing:
    name: LLM Data Processing
    runs-on: ubuntu-latest
    needs: [validate-secrets, pre-collection-setup, maricopa-collection, phoenix-mls-collection]
    if: always() && (needs.maricopa-collection.result == 'success' || needs.phoenix-mls-collection.result == 'success')
    timeout-minutes: 30
    environment: production
    secrets: inherit
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Setup Ollama LLM service
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        ollama serve &
        sleep 10
        ollama pull llama3.2:latest
        echo "[OK] Ollama LLM service ready"
    
    - name: Download collection artifacts
      uses: actions/download-artifact@v4
      with:
        path: collection-artifacts/
    
    - name: Setup LLM processing environment
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        OLLAMA_URL: "http://localhost:11434"
        FORCE_LLM_PROCESSING: ${{ github.event.inputs.force_llm_processing || 'false' }}
      run: |
        mkdir -p data/processed logs
        # Copy artifacts to working directories
        find collection-artifacts/ -name "*.json" -exec cp {} data/raw/ \;
        find collection-artifacts/ -name "*.html" -exec cp {} data/raw/ \;
        echo "[OK] LLM processing environment ready"
    
    - name: Execute LLM data processing
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        OLLAMA_URL: "http://localhost:11434"
        FORCE_LLM_PROCESSING: ${{ github.event.inputs.force_llm_processing || 'false' }}
        COLLECTION_MODE: ${{ needs.pre-collection-setup.outputs.collection-mode }}
      run: |
        uv run python scripts/testing/run_llm_e2e_tests.py --collection-mode "$COLLECTION_MODE"
      timeout-minutes: 25
    
    - name: Validate processing results
      run: |
        uv run python scripts/testing/test_performance_optimizations.py --validate-results
        echo "[OK] LLM processing validation completed"
    
    - name: Upload LLM processing artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: llm-processing-results-${{ github.run_number }}
        path: |
          data/processed/*.json
          logs/llm_processing_*.log
          logs/ollama_*.log
        retention-days: 14

  data-quality-validation:
    name: Data Quality Validation
    runs-on: ubuntu-latest
    needs: [validate-secrets, pre-collection-setup, llm-data-processing]
    if: always() && needs.llm-data-processing.result == 'success'
    timeout-minutes: 10
    environment: production
    secrets: inherit
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Download processing results
      uses: actions/download-artifact@v4
      with:
        name: llm-processing-results-${{ github.run_number }}
        path: processing-results/
    
    - name: Setup validation environment
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
      run: |
        cp -r processing-results/data/processed/* data/processed/ 2>/dev/null || true
        echo "[OK] Validation environment setup"
    
    - name: Run data quality checks
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        COLLECTION_MODE: ${{ needs.pre-collection-setup.outputs.collection-mode }}
      run: |
        uv run python scripts/validation/validate_system.py --check-data-quality
        echo "[OK] Data quality validation completed"
    
    - name: Generate collection summary report
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        COLLECTION_MODE: ${{ needs.pre-collection-setup.outputs.collection-mode }}
        ZIP_CODES: ${{ needs.pre-collection-setup.outputs.zip-codes }}
      run: |
        uv run python scripts/testing/test_maricopa_summary.py --generate-report
        echo "[OK] Collection summary report generated"
    
    - name: Upload validation artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: data-quality-report-${{ github.run_number }}
        path: |
          reports/collection_summary_*.json
          reports/data_quality_*.json
          logs/validation_*.log
        retention-days: 30

  collection-notification:
    name: Collection Status Notification
    runs-on: ubuntu-latest
    needs: [validate-secrets, pre-collection-setup, maricopa-collection, phoenix-mls-collection, llm-data-processing, data-quality-validation]
    if: always()
    environment: production
    secrets: inherit
    
    steps:
    - name: Determine collection status
      id: status
      run: |
        maricopa_status="${{ needs.maricopa-collection.result }}"
        phoenix_mls_status="${{ needs.phoenix-mls-collection.result }}"
        llm_status="${{ needs.llm-data-processing.result }}"
        validation_status="${{ needs.data-quality-validation.result }}"
        
        if [[ "$validation_status" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=[OK] Daily data collection completed successfully" >> $GITHUB_OUTPUT
        elif [[ "$llm_status" == "success" ]]; then
          echo "status=partial" >> $GITHUB_OUTPUT
          echo "message=[WARN] Data collection completed with validation issues" >> $GITHUB_OUTPUT
        elif [[ "$maricopa_status" == "success" || "$phoenix_mls_status" == "success" ]]; then
          echo "status=partial" >> $GITHUB_OUTPUT
          echo "message=[WARN] Data collection completed but LLM processing failed" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=[FAIL] Data collection failed completely" >> $GITHUB_OUTPUT
        fi
    
    - name: Create collection summary
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        # Daily Data Collection Summary
        
        **Collection Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Status**: ${{ steps.status.outputs.status }}
        **Message**: ${{ steps.status.outputs.message }}
        **ZIP Codes**: ${{ needs.pre-collection-setup.outputs.zip-codes }}
        **Collection Mode**: ${{ needs.pre-collection-setup.outputs.collection-mode }}
        
        ## Component Status
        - Maricopa API Collection: ${{ needs.maricopa-collection.result }}
        - Phoenix MLS Scraping: ${{ needs.phoenix-mls-collection.result }}
        - LLM Data Processing: ${{ needs.llm-data-processing.result }}
        - Data Quality Validation: ${{ needs.data-quality-validation.result }}
        
        ## Resource Usage
        - Estimated Runtime: ${{ needs.pre-collection-setup.outputs.estimated-runtime }} minutes
        - GitHub Actions Minutes Used: ~$(( ${{ needs.pre-collection-setup.outputs.estimated-runtime }} + 10 ))
        
        ## Next Collection
        - Scheduled: Tomorrow at 3 AM Phoenix time (10 AM UTC)
        - Mode: Incremental (unless manually triggered)
        EOF
    
    - name: Create issue on failure
      if: steps.status.outputs.status == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const issueBody = `
          ## Daily Data Collection Failed
          
          **Run ID**: ${{ github.run_id }}
          **Timestamp**: ${new Date().toISOString()}
          **ZIP Codes**: ${{ needs.pre-collection-setup.outputs.zip-codes }}
          **Collection Mode**: ${{ needs.pre-collection-setup.outputs.collection-mode }}
          
          ### Component Status
          - Maricopa API Collection: ${{ needs.maricopa-collection.result }}
          - Phoenix MLS Scraping: ${{ needs.phoenix-mls-collection.result }}
          - LLM Data Processing: ${{ needs.llm-data-processing.result }}
          - Data Quality Validation: ${{ needs.data-quality-validation.result }}
          
          ### Action Required
          - Review workflow logs for error details
          - Check service health and API credentials
          - Consider manual retry if appropriate
          - Update issue with resolution steps
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Daily Collection Failed - ${new Date().toDateString()}`,
            body: issueBody,
            labels: ['automation', 'data-collection', 'failure', 'high-priority']
          });