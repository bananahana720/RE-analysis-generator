name: Test Secrets Access

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test (test/production)'
        required: false
        type: choice
        options: ['test', 'production']
        default: 'test'

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.13"

concurrency:
  group: test-secrets-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-secret-access:
    name: Test Secret Access
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment: ${{ github.event.inputs.environment == 'production' && 'production' || '' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Test Secret Access - Test Environment
      if: github.event.inputs.environment != 'production'
      env:
        TEST_MONGODB_PASSWORD: ${{ secrets.TEST_MONGODB_PASSWORD }}
        TEST_MARICOPA_API_KEY: ${{ secrets.TEST_MARICOPA_API_KEY }}
        TEST_WEBSHARE_API_KEY: ${{ secrets.TEST_WEBSHARE_API_KEY }}
        TEST_CAPTCHA_API_KEY: ${{ secrets.TEST_CAPTCHA_API_KEY }}
        # Fallback patterns
        TEST_MARICOPA_API: ${{ secrets.TEST_MARICOPA_API }}
        TEST_WEBSHARE_API: ${{ secrets.TEST_WEBSHARE_API }}
      run: |
        echo "[INFO] Testing access to test environment secrets..."
        
        # Test primary secrets
        secrets_found=0
        total_secrets=4
        
        if [[ -n "$TEST_MONGODB_PASSWORD" ]]; then
          echo "‚úÖ TEST_MONGODB_PASSWORD: Available (length: ${#TEST_MONGODB_PASSWORD})"
          ((secrets_found++))
        else
          echo "‚ùå TEST_MONGODB_PASSWORD: Not accessible"
        fi
        
        # Test MARICOPA with fallback
        maricopa_key="$TEST_MARICOPA_API_KEY"
        if [[ -z "$maricopa_key" ]]; then
          maricopa_key="$TEST_MARICOPA_API"
          if [[ -n "$maricopa_key" ]]; then
            echo "‚úÖ TEST_MARICOPA_API (fallback): Available (length: ${#maricopa_key})"
          fi
        elif [[ -n "$maricopa_key" ]]; then
          echo "‚úÖ TEST_MARICOPA_API_KEY: Available (length: ${#maricopa_key})"
        fi
        
        if [[ -n "$maricopa_key" ]]; then
          ((secrets_found++))
          # Validate UUID format
          if [[ "$maricopa_key" =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
            echo "  ‚úÖ Format: Valid UUID"
          else
            echo "  ‚ö†Ô∏è Format: Not a valid UUID (may cause API errors)"
          fi
        else
          echo "‚ùå TEST_MARICOPA_API_KEY/TEST_MARICOPA_API: Not accessible"
        fi
        
        # Test WEBSHARE with fallback
        webshare_key="$TEST_WEBSHARE_API_KEY"
        if [[ -z "$webshare_key" ]]; then
          webshare_key="$TEST_WEBSHARE_API"
          if [[ -n "$webshare_key" ]]; then
            echo "‚úÖ TEST_WEBSHARE_API (fallback): Available (length: ${#webshare_key})"
          fi
        elif [[ -n "$webshare_key" ]]; then
          echo "‚úÖ TEST_WEBSHARE_API_KEY: Available (length: ${#webshare_key})"
        fi
        
        if [[ -n "$webshare_key" ]]; then
          ((secrets_found++))
        else
          echo "‚ùå TEST_WEBSHARE_API_KEY/TEST_WEBSHARE_API: Not accessible"
        fi
        
        if [[ -n "$TEST_CAPTCHA_API_KEY" ]]; then
          echo "‚úÖ TEST_CAPTCHA_API_KEY: Available (length: ${#TEST_CAPTCHA_API_KEY})"
          ((secrets_found++))
        else
          echo "‚ùå TEST_CAPTCHA_API_KEY: Not accessible"
        fi
        
        # Test MongoDB URL construction
        if [[ -n "$TEST_MONGODB_PASSWORD" ]]; then
          test_url="mongodb://admin:$TEST_MONGODB_PASSWORD@localhost:27017/"
          echo "‚úÖ TEST_MONGODB_URL construction: Success"
          echo "  Format: mongodb://admin:***@localhost:27017/"
        else
          echo "‚ùå TEST_MONGODB_URL construction: Failed (missing password)"
        fi
        
        echo ""
        echo "Summary: $secrets_found/$total_secrets secrets accessible"
        
        if [[ $secrets_found -eq $total_secrets ]]; then
          echo "üéâ All test secrets are properly configured!"
        else
          echo "‚ö†Ô∏è Missing $((total_secrets - secrets_found)) required secrets"
          echo "Please refer to docs/deployment/GITHUB_SECRETS_CONFIGURATION.md for setup instructions"
          exit 1
        fi
    
    - name: Test Secret Access - Production Environment
      if: github.event.inputs.environment == 'production'
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        MARICOPA_API_KEY: ${{ secrets.MARICOPA_API_KEY }}
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
        CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
        # Fallback patterns
        MARICOPA_API: ${{ secrets.MARICOPA_API }}
        WEBSHARE_API: ${{ secrets.WEBSHARE_API }}
      run: |
        echo "[INFO] Testing access to production environment secrets..."
        
        secrets_found=0
        total_secrets=4
        
        if [[ -n "$MONGODB_URL" ]]; then
          echo "‚úÖ MONGODB_URL: Available"
          ((secrets_found++))
          # Validate basic MongoDB URL format
          if [[ "$MONGODB_URL" =~ ^mongodb ]]; then
            echo "  ‚úÖ Format: Valid MongoDB URL"
          else
            echo "  ‚ö†Ô∏è Format: May not be a valid MongoDB URL"
          fi
        else
          echo "‚ùå MONGODB_URL: Not accessible"
        fi
        
        # Test MARICOPA with fallback
        maricopa_key="$MARICOPA_API_KEY"
        if [[ -z "$maricopa_key" ]]; then
          maricopa_key="$MARICOPA_API"
          if [[ -n "$maricopa_key" ]]; then
            echo "‚úÖ MARICOPA_API (fallback): Available"
          fi
        elif [[ -n "$maricopa_key" ]]; then
          echo "‚úÖ MARICOPA_API_KEY: Available"
        fi
        
        if [[ -n "$maricopa_key" ]]; then
          ((secrets_found++))
        else
          echo "‚ùå MARICOPA_API_KEY/MARICOPA_API: Not accessible"
        fi
        
        # Test WEBSHARE with fallback  
        webshare_key="$WEBSHARE_API_KEY"
        if [[ -z "$webshare_key" ]]; then
          webshare_key="$WEBSHARE_API"
          if [[ -n "$webshare_key" ]]; then
            echo "‚úÖ WEBSHARE_API (fallback): Available"
          fi
        elif [[ -n "$webshare_key" ]]; then
          echo "‚úÖ WEBSHARE_API_KEY: Available"
        fi
        
        if [[ -n "$webshare_key" ]]; then
          ((secrets_found++))
        else
          echo "‚ùå WEBSHARE_API_KEY/WEBSHARE_API: Not accessible"
        fi
        
        if [[ -n "$CAPTCHA_API_KEY" ]]; then
          echo "‚úÖ CAPTCHA_API_KEY: Available"
          ((secrets_found++))
        else
          echo "‚ùå CAPTCHA_API_KEY: Not accessible"
        fi
        
        echo ""
        echo "Summary: $secrets_found/$total_secrets production secrets accessible"
        
        if [[ $secrets_found -eq $total_secrets ]]; then
          echo "üéâ All production secrets are properly configured!"
        else
          echo "‚ö†Ô∏è Missing $((total_secrets - secrets_found)) required secrets"
          exit 1
        fi
    
    - name: Run Python Secret Validator
      env:
        TEST_MONGODB_PASSWORD: ${{ secrets.TEST_MONGODB_PASSWORD }}
        TEST_MARICOPA_API_KEY: ${{ secrets.TEST_MARICOPA_API_KEY }}
        TEST_WEBSHARE_API_KEY: ${{ secrets.TEST_WEBSHARE_API_KEY }}
        TEST_CAPTCHA_API_KEY: ${{ secrets.TEST_CAPTCHA_API_KEY }}
        # Fallback patterns
        TEST_MARICOPA_API: ${{ secrets.TEST_MARICOPA_API }}
        TEST_WEBSHARE_API: ${{ secrets.TEST_WEBSHARE_API }}
        # Production secrets (if testing production)
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        MARICOPA_API_KEY: ${{ secrets.MARICOPA_API_KEY }}
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
        CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
        MARICOPA_API: ${{ secrets.MARICOPA_API }}
        WEBSHARE_API: ${{ secrets.WEBSHARE_API }}
      run: |
        echo "[INFO] Running Python-based secret validation..."
        
        # Test both environments if secrets are available
        if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
          uv run python scripts/validation/verify_github_secrets.py --environment production --check-workflow-compatibility --verbose
        else
          uv run python scripts/validation/verify_github_secrets.py --environment test --check-workflow-compatibility --simulate-github-actions --verbose
        fi
    
    - name: Create validation summary
      if: always()
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        # Secret Access Test Results
        
        **Environment**: ${{ github.event.inputs.environment }}
        **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Status**: ${{ job.status }}
        
        ## Test Details
        
        This workflow tested access to repository secrets for the specified environment:
        
        ### Test Environment Secrets
        - TEST_MONGODB_PASSWORD: Required for database connections
        - TEST_MARICOPA_API_KEY: Required for Maricopa API integration tests
        - TEST_WEBSHARE_API_KEY: Required for Phoenix MLS proxy services
        - TEST_CAPTCHA_API_KEY: Required for E2E testing with CAPTCHA handling
        
        ### Production Environment Secrets  
        - MONGODB_URL: Production database connection
        - MARICOPA_API_KEY: Production Maricopa API access
        - WEBSHARE_API_KEY: Production WebShare proxy access
        - CAPTCHA_API_KEY: Production CAPTCHA solving service
        
        ## Next Steps
        
        If this test failed:
        1. Review the job logs for specific missing secrets
        2. Configure missing secrets using the instructions in docs/deployment/GITHUB_SECRETS_CONFIGURATION.md
        3. Re-run this workflow to verify configuration
        
        If this test passed:
        1. Your secrets are properly configured
        2. CI/CD workflows should now work correctly
        3. Consider running the main CI/CD pipeline to fully validate
        EOF