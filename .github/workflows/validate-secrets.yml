name: Validate Secrets Configuration

on:
  # Daily secret health monitoring at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  
  workflow_call:
    inputs:
      environment:
        description: 'Environment to validate (test/production)'
        required: false
        default: 'production'
        type: string
    outputs:
      validation-status:
        description: 'Secret validation status'
        value: ${{ jobs.validate.outputs.status }}
      alert-level:
        description: 'Alert severity level'
        value: ${{ jobs.validate.outputs.alert-level }}
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate'
        required: false
        type: choice
        options: ['test', 'production', 'both']
        default: 'production'
      test_connectivity:
        description: 'Test service connectivity'
        required: false
        type: boolean
        default: true
      detailed_output:
        description: 'Enable detailed output and diagnostics'
        required: false
        type: boolean
        default: true
      create_alert_issue:
        description: 'Create GitHub issue on critical failures'
        required: false
        type: boolean
        default: true

permissions:
  contents: read
  issues: write

env:
  PYTHON_VERSION: "3.13"

concurrency:
  group: validate-secrets-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: Validate Secrets Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{ github.event.inputs.environment == 'production' && 'production' || '' }}
    outputs:
      status: ${{ steps.final-status.outputs.status }}
      alert-level: ${{ steps.final-status.outputs.alert-level }}
      test_status: ${{ steps.validate-test.outputs.status }}
      production_status: ${{ steps.validate-production.outputs.status }}
      connectivity_status: ${{ steps.connectivity.outputs.status }}
      critical_failures: ${{ steps.final-status.outputs.critical_failures }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      if: github.event.inputs.test_connectivity != 'false'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      if: github.event.inputs.test_connectivity != 'false'
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      if: github.event.inputs.test_connectivity != 'false'
      run: uv sync --extra dev
    
    - name: Initialize validation tracking
      id: init
      run: |
        echo "SECRET VALIDATION STARTED" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: ${{ github.event.inputs.environment || inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Test Connectivity**: ${{ github.event.inputs.test_connectivity || 'true' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Initialize counters
        echo "test_passed=false" >> $GITHUB_OUTPUT
        echo "production_passed=false" >> $GITHUB_OUTPUT
        echo "overall_status=pending" >> $GITHUB_OUTPUT
    
    - name: Validate Test Environment Secrets
      id: validate-test
      if: github.event.inputs.environment == 'test' || github.event.inputs.environment == 'both' || inputs.environment == 'test'
      run: |
        echo "## Test Environment Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        missing_secrets=()
        configured_secrets=()
        warnings=()
        
        # Test environment secrets with fallback support
        secrets_to_check=(
          "TEST_MONGODB_PASSWORD:${{ secrets.TEST_MONGODB_PASSWORD }}"
          "TEST_MARICOPA_API_KEY:${{ secrets.TEST_MARICOPA_API_KEY }}:${{ secrets.TEST_MARICOPA_API }}"
          "TEST_WEBSHARE_API_KEY:${{ secrets.TEST_WEBSHARE_API_KEY }}:${{ secrets.TEST_WEBSHARE_API }}"
          "TEST_CAPTCHA_API_KEY:${{ secrets.TEST_CAPTCHA_API_KEY }}"
        )
        
        for secret_config in "${secrets_to_check[@]}"; do
          IFS=':' read -ra SECRET_PARTS <<< "$secret_config"
          secret_name="${SECRET_PARTS[0]}"
          primary_value="${SECRET_PARTS[1]}"
          fallback_value="${SECRET_PARTS[2]:-}"
          
          if [[ -n "$primary_value" ]]; then
            configured_secrets+=("$secret_name")
            echo "SUCCESS $secret_name: Configured (length: ${#primary_value})" >> $GITHUB_STEP_SUMMARY
            
            # Validate format and content
            if [[ "$primary_value" == "test-key" || "$primary_value" == "placeholder" ]]; then
              warnings+=("$secret_name appears to contain placeholder value")
              echo "WARNING $secret_name: Using placeholder value" >> $GITHUB_STEP_SUMMARY
            fi
          elif [[ -n "$fallback_value" ]]; then
            configured_secrets+=("$secret_name")
            echo "SUCCESS $secret_name: Using fallback (length: ${#fallback_value})" >> $GITHUB_STEP_SUMMARY
          else
            missing_secrets+=("$secret_name")
            echo "FAIL $secret_name: Not configured" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test Results**: ${#configured_secrets[@]} configured, ${#missing_secrets[@]} missing" >> $GITHUB_STEP_SUMMARY
        
        if [[ ${#warnings[@]} -gt 0 ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Warnings**:" >> $GITHUB_STEP_SUMMARY
          for warning in "${warnings[@]}"; do
            echo "- $warning" >> $GITHUB_STEP_SUMMARY
          done
        fi
        
        if [[ ${#missing_secrets[@]} -eq 0 ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**MISSING SECRETS**: ${missing_secrets[*]}" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Validate Production Environment Secrets  
      id: validate-production
      if: github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both' || inputs.environment == 'production'
      run: |
        echo "## Production Environment Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        missing_secrets=()
        configured_secrets=()
        warnings=()
        
        # Production environment secrets with fallback support
        secrets_to_check=(
          "MONGODB_URL:${{ secrets.MONGODB_URL }}"
          "MARICOPA_API_KEY:${{ secrets.MARICOPA_API_KEY }}:${{ secrets.MARICOPA_API }}"
          "WEBSHARE_API_KEY:${{ secrets.WEBSHARE_API_KEY }}:${{ secrets.WEBSHARE_API }}"
          "CAPTCHA_API_KEY:${{ secrets.CAPTCHA_API_KEY }}"
        )
        
        for secret_config in "${secrets_to_check[@]}"; do
          IFS=':' read -ra SECRET_PARTS <<< "$secret_config"
          secret_name="${SECRET_PARTS[0]}"
          primary_value="${SECRET_PARTS[1]}"
          fallback_value="${SECRET_PARTS[2]:-}"
          
          if [[ -n "$primary_value" ]]; then
            configured_secrets+=("$secret_name")
            echo "SUCCESS $secret_name: Configured" >> $GITHUB_STEP_SUMMARY
            
            # Basic format validation
            case "$secret_name" in
              "MONGODB_URL")
                if [[ ! "$primary_value" =~ ^mongodb ]]; then
                  warnings+=("MONGODB_URL does not start with 'mongodb'")
                  echo "WARNING MONGODB_URL: Invalid format" >> $GITHUB_STEP_SUMMARY
                fi
                ;;
              "MARICOPA_API_KEY")
                if [[ ! "$primary_value" =~ ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$ ]]; then
                  warnings+=("MARICOPA_API_KEY does not match UUID format")
                  echo "WARNING MARICOPA_API_KEY: Not UUID format" >> $GITHUB_STEP_SUMMARY
                fi
                ;;
            esac
          elif [[ -n "$fallback_value" ]]; then
            configured_secrets+=("$secret_name")
            echo "SUCCESS $secret_name: Using fallback" >> $GITHUB_STEP_SUMMARY
          else
            missing_secrets+=("$secret_name")
            echo "FAIL $secret_name: Not configured" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Production Results**: ${#configured_secrets[@]} configured, ${#missing_secrets[@]} missing" >> $GITHUB_STEP_SUMMARY
        
        if [[ ${#warnings[@]} -gt 0 ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Warnings**:" >> $GITHUB_STEP_SUMMARY
          for warning in "${warnings[@]}"; do
            echo "- $warning" >> $GITHUB_STEP_SUMMARY
          done
        fi
        
        if [[ ${#missing_secrets[@]} -eq 0 ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**MISSING SECRETS**: ${missing_secrets[*]}" >> $GITHUB_STEP_SUMMARY
          
          # CRITICAL: Production is DOWN notice
          if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ inputs.environment }}" == "production" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "CRITICAL: Production secrets missing - services may be DOWN!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        fi
    
    - name: Test Service Connectivity
      id: connectivity
      if: github.event.inputs.test_connectivity != 'false' && (steps.validate-test.outputs.status == 'success' || steps.validate-production.outputs.status == 'success')
      env:
        # Test environment secrets
        TEST_MONGODB_PASSWORD: ${{ secrets.TEST_MONGODB_PASSWORD }}
        TEST_MARICOPA_API_KEY: ${{ secrets.TEST_MARICOPA_API_KEY }}
        TEST_WEBSHARE_API_KEY: ${{ secrets.TEST_WEBSHARE_API_KEY }}
        TEST_CAPTCHA_API_KEY: ${{ secrets.TEST_CAPTCHA_API_KEY }}
        TEST_MARICOPA_API: ${{ secrets.TEST_MARICOPA_API }}
        TEST_WEBSHARE_API: ${{ secrets.TEST_WEBSHARE_API }}
        # Production environment secrets
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        MARICOPA_API_KEY: ${{ secrets.MARICOPA_API_KEY }}
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
        CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
        MARICOPA_API: ${{ secrets.MARICOPA_API }}
        WEBSHARE_API: ${{ secrets.WEBSHARE_API }}
      run: |
        echo "## Service Connectivity Testing" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        connectivity_results=()
        total_tests=0
        passed_tests=0
        
        # Install required packages for connectivity testing
        pip install pymongo requests dnspython || echo "Failed to install connectivity test packages"
        
        # Determine which environment to test
        test_environment="${{ github.event.inputs.environment || inputs.environment }}"
        
        if [[ "$test_environment" == "test" || "$test_environment" == "both" ]]; then
          echo "### Test Environment Connectivity" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test MongoDB connectivity (if password available)
          if [[ -n "$TEST_MONGODB_PASSWORD" ]]; then
            echo "Testing MongoDB connection..."
            ((total_tests++))
            
            # Simple connection test using Python
            if timeout 30 python3 -c 'import pymongo; import sys; client = pymongo.MongoClient("mongodb://admin:$TEST_MONGODB_PASSWORD@localhost:27017/", serverSelectionTimeoutMS=5000); client.server_info(); print("MongoDB: Connection successful")' 2>/dev/null; then
              echo "SUCCESS MongoDB: Connection successful" >> $GITHUB_STEP_SUMMARY
              ((passed_tests++))
            else
              echo "FAIL MongoDB: Connection failed (timeout or unreachable)" >> $GITHUB_STEP_SUMMARY
              connectivity_results+=("MongoDB connection failed")
            fi
          else
            echo "SKIP MongoDB: Skipped (no password)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test Maricopa API connectivity
          maricopa_key="$TEST_MARICOPA_API_KEY"
          [[ -z "$maricopa_key" ]] && maricopa_key="$TEST_MARICOPA_API"
          
          if [[ -n "$maricopa_key" ]]; then
            echo "Testing Maricopa API connection..."
            ((total_tests++))
            
            # Test API endpoint with timeout
            if timeout 15 curl -f -s -H "Authorization: Bearer $maricopa_key" \
               "https://api.mcassessor.maricopa.gov/v1/properties?limit=1" >/dev/null 2>&1; then
              echo "SUCCESS Maricopa API: Connection successful" >> $GITHUB_STEP_SUMMARY
              ((passed_tests++))
            else
              echo "FAIL Maricopa API: Connection failed or unauthorized" >> $GITHUB_STEP_SUMMARY
              connectivity_results+=("Maricopa API connection failed")
            fi
          else
            echo "SKIP Maricopa API: Skipped (no key)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test WebShare proxy connectivity
          webshare_key="$TEST_WEBSHARE_API_KEY"
          [[ -z "$webshare_key" ]] && webshare_key="$TEST_WEBSHARE_API"
          
          if [[ -n "$webshare_key" ]]; then
            echo "Testing WebShare API connection..."
            ((total_tests++))
            
            # Test WebShare API endpoint
            if timeout 15 curl -f -s -H "Authorization: Token $webshare_key" \
               "https://proxy.webshare.io/api/v2/proxy/list/?limit=1" >/dev/null 2>&1; then
              echo "SUCCESS WebShare API: Connection successful" >> $GITHUB_STEP_SUMMARY
              ((passed_tests++))
            else
              echo "FAIL WebShare API: Connection failed or unauthorized" >> $GITHUB_STEP_SUMMARY
              connectivity_results+=("WebShare API connection failed")
            fi
          else
            echo "SKIP WebShare API: Skipped (no key)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Test 2captcha API connectivity
          if [[ -n "$TEST_CAPTCHA_API_KEY" ]]; then
            echo "Testing 2captcha API connection..."
            ((total_tests++))
            
            # Test 2captcha balance endpoint
            if timeout 10 curl -f -s "http://2captcha.com/res.php?key=$TEST_CAPTCHA_API_KEY&action=getbalance" | grep -q "[0-9]"; then
              echo "SUCCESS 2captcha API: Connection successful" >> $GITHUB_STEP_SUMMARY
              ((passed_tests++))
            else
              echo "FAIL 2captcha API: Connection failed or invalid key" >> $GITHUB_STEP_SUMMARY
              connectivity_results+=("2captcha API connection failed")
            fi
          else
            echo "SKIP 2captcha API: Skipped (no key)" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        if [[ "$test_environment" == "production" || "$test_environment" == "both" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production Environment Connectivity" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Test MongoDB Atlas connectivity
          if [[ -n "$MONGODB_URL" ]]; then
            echo "Testing MongoDB Atlas connection..."
            ((total_tests++))
            
            if timeout 30 python3 -c 'import pymongo; import sys; client = pymongo.MongoClient("$MONGODB_URL", serverSelectionTimeoutMS=10000); client.server_info(); print("MongoDB Atlas: Connection successful")' 2>/dev/null; then
              echo "SUCCESS MongoDB Atlas: Connection successful" >> $GITHUB_STEP_SUMMARY
              ((passed_tests++))
            else
              echo "FAIL MongoDB Atlas: Connection failed" >> $GITHUB_STEP_SUMMARY
              connectivity_results+=("MongoDB Atlas connection failed")
            fi
          else
            echo "SKIP MongoDB Atlas: Skipped (no URL)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Production API tests (similar pattern but with production keys)
          prod_maricopa="$MARICOPA_API_KEY"
          [[ -z "$prod_maricopa" ]] && prod_maricopa="$MARICOPA_API"
          
          if [[ -n "$prod_maricopa" ]]; then
            echo "Testing Production Maricopa API..."
            ((total_tests++))
            
            if timeout 15 curl -f -s -H "Authorization: Bearer $prod_maricopa" \
               "https://api.mcassessor.maricopa.gov/v1/properties?limit=1" >/dev/null 2>&1; then
              echo "SUCCESS Production Maricopa API: Connection successful" >> $GITHUB_STEP_SUMMARY
              ((passed_tests++))
            else
              echo "FAIL Production Maricopa API: Connection failed" >> $GITHUB_STEP_SUMMARY
              connectivity_results+=("Production Maricopa API connection failed")
            fi
          fi
        fi
        
        # Summary
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Connectivity Results**: $passed_tests/$total_tests services reachable" >> $GITHUB_STEP_SUMMARY
        
        if [[ ${#connectivity_results[@]} -eq 0 && $total_tests -gt 0 ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**All tested services are reachable!**" >> $GITHUB_STEP_SUMMARY
        elif [[ $total_tests -eq 0 ]]; then
          echo "status=skipped" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**No connectivity tests performed** (no valid secrets)" >> $GITHUB_STEP_SUMMARY
        else
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Service connectivity issues detected:**" >> $GITHUB_STEP_SUMMARY
          for result in "${connectivity_results[@]}"; do
            echo "- $result" >> $GITHUB_STEP_SUMMARY
          done
        fi
    
    - name: Run Advanced Python Validation
      if: github.event.inputs.detailed_output != 'false' && github.event.inputs.test_connectivity != 'false'
      env:
        # All secrets for comprehensive validation
        TEST_MONGODB_PASSWORD: ${{ secrets.TEST_MONGODB_PASSWORD }}
        TEST_MARICOPA_API_KEY: ${{ secrets.TEST_MARICOPA_API_KEY }}
        TEST_WEBSHARE_API_KEY: ${{ secrets.TEST_WEBSHARE_API_KEY }}
        TEST_CAPTCHA_API_KEY: ${{ secrets.TEST_CAPTCHA_API_KEY }}
        TEST_MARICOPA_API: ${{ secrets.TEST_MARICOPA_API }}
        TEST_WEBSHARE_API: ${{ secrets.TEST_WEBSHARE_API }}
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        MARICOPA_API_KEY: ${{ secrets.MARICOPA_API_KEY }}
        WEBSHARE_API_KEY: ${{ secrets.WEBSHARE_API_KEY }}
        CAPTCHA_API_KEY: ${{ secrets.CAPTCHA_API_KEY }}
        MARICOPA_API: ${{ secrets.MARICOPA_API }}
        WEBSHARE_API: ${{ secrets.WEBSHARE_API }}
      run: |
        echo "## Advanced Python Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Run comprehensive validation with detailed output
        environment="${{ github.event.inputs.environment || inputs.environment }}"
        
        echo "Running advanced validation for: $environment"
        
        if [[ "$environment" == "both" ]]; then
          echo "### Test Environment Analysis" >> $GITHUB_STEP_SUMMARY
          uv run python scripts/validation/verify_github_secrets.py \
            --environment test \
            --check-workflow-compatibility \
            --simulate-github-actions \
            --verbose || echo "Test environment validation had issues"
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production Environment Analysis" >> $GITHUB_STEP_SUMMARY
          uv run python scripts/validation/verify_github_secrets.py \
            --environment production \
            --check-workflow-compatibility \
            --verbose || echo "Production environment validation had issues"
        else
          uv run python scripts/validation/verify_github_secrets.py \
            --environment "$environment" \
            --check-workflow-compatibility \
            --simulate-github-actions \
            --verbose
        fi
    
    - name: Final Status and Recommendations
      id: final-status
      if: always()
      run: |
        # Determine overall status
        test_env_requested="false"
        prod_env_requested="false"
        environment="${{ github.event.inputs.environment || inputs.environment }}"
        
        [[ "$environment" == "test" || "$environment" == "both" ]] && test_env_requested="true"
        [[ "$environment" == "production" || "$environment" == "both" ]] && prod_env_requested="true"
        
        test_status="${{ steps.validate-test.outputs.status }}"
        prod_status="${{ steps.validate-production.outputs.status }}"
        connectivity_status="${{ steps.connectivity.outputs.status }}"
        
        overall_success="true"
        
        # Check test environment if requested
        if [[ "$test_env_requested" == "true" && "$test_status" != "success" ]]; then
          overall_success="false"
        fi
        
        # Check production environment if requested  
        if [[ "$prod_env_requested" == "true" && "$prod_status" != "success" ]]; then
          overall_success="false"
        fi
        
        # Include connectivity if it was tested and failed
        if [[ "$connectivity_status" == "failed" ]]; then
          overall_success="false"
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Final Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine alert level and critical failures
        critical_failures=0
        if [[ "$prod_env_requested" == "true" && "$prod_status" != "success" ]]; then
          critical_failures=$((critical_failures + 1))
        fi
        if [[ "$connectivity_status" == "failed" ]]; then
          critical_failures=$((critical_failures + 1))
        fi
        
        alert_level="info"
        if [[ $critical_failures -gt 0 ]]; then
          alert_level="critical"
        elif [[ "$test_status" != "success" && "$test_env_requested" == "true" ]]; then
          alert_level="warning"
        fi
        
        if [[ "$overall_success" == "true" ]]; then
          echo "**VALIDATION PASSED** - All requested secrets are properly configured" >> $GITHUB_STEP_SUMMARY
          echo "status=success" >> $GITHUB_OUTPUT
          echo "alert-level=$alert_level" >> $GITHUB_OUTPUT
          echo "critical_failures=$critical_failures" >> $GITHUB_OUTPUT
        else
          echo "**VALIDATION FAILED** - Critical issues found" >> $GITHUB_STEP_SUMMARY
          echo "status=failed" >> $GITHUB_OUTPUT
          echo "alert-level=$alert_level" >> $GITHUB_OUTPUT
          echo "critical_failures=$critical_failures" >> $GITHUB_OUTPUT
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Immediate Actions Required:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. **Configure Missing Secrets**:" >> $GITHUB_STEP_SUMMARY
          echo "   - Go to: Repository Settings -> Secrets and variables -> Actions" >> $GITHUB_STEP_SUMMARY
          echo "   - Add the missing secrets listed above" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "2. **Verify Configuration**:" >> $GITHUB_STEP_SUMMARY
          echo "   - Re-run this workflow to validate" >> $GITHUB_STEP_SUMMARY
          echo "   - Use .github/workflows/test-secrets-access.yml for detailed testing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "3. **Documentation**:" >> $GITHUB_STEP_SUMMARY
          echo "   - See: docs/deployment/GITHUB_SECRETS_CONFIGURATION.md" >> $GITHUB_STEP_SUMMARY
          echo "   - Contact DevOps if you need assistance" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$prod_env_requested" == "true" && "$prod_status" != "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### CRITICAL PRODUCTION ALERT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Production services may be DOWN due to missing secrets!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- This is a **P0 incident** requiring immediate attention" >> $GITHUB_STEP_SUMMARY
            echo "- Data collection, API services, and monitoring may be affected" >> $GITHUB_STEP_SUMMARY
            echo "- Configure production secrets immediately to restore service" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Environment Summary:" >> $GITHUB_STEP_SUMMARY
        [[ "$test_env_requested" == "true" ]] && echo "- **Test Environment**: $test_status" >> $GITHUB_STEP_SUMMARY
        [[ "$prod_env_requested" == "true" ]] && echo "- **Production Environment**: $prod_status" >> $GITHUB_STEP_SUMMARY
        [[ "${{ github.event.inputs.test_connectivity }}" != "false" ]] && echo "- **Service Connectivity**: $connectivity_status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow completed at**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        
        # Set final exit code
        if [[ "$overall_success" != "true" ]]; then
          echo "Secret validation failed - see summary for details"
          exit 1
        else
          echo "Secret validation successful - all systems ready"
        fi
    
    - name: Create Critical Alert Issue
      if: always() && steps.final-status.outputs.alert-level == 'critical' && github.event.inputs.create_alert_issue != 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const alertLevel = '${{ steps.final-status.outputs.alert-level }}';
          const criticalFailures = '${{ steps.final-status.outputs.critical_failures }}';
          const environment = '${{ github.event.inputs.environment || inputs.environment || "production" }}';
          const runId = '${{ github.run_id }}';
          const serverUrl = '${{ github.server_url }}';
          const repo = '${{ github.repository }}';
          
          const issueBody = `
          ## 🚨 CRITICAL: Production Secrets Validation Failed
          
          **Alert Level**: ${alertLevel}
          **Critical Failures**: ${criticalFailures}
          **Environment**: ${environment}
          **Timestamp**: ${new Date().toISOString()}
          **Workflow Run**: [${runId}](${serverUrl}/${repo}/actions/runs/${runId})
          
          ### Immediate Action Required
          
          Production services may be **DOWN** due to missing or invalid secrets configuration.
          
          **This is a P0 incident requiring immediate attention.**
          
          ### Investigation Steps
          
          1. **Check Secret Configuration**:
             - Go to Repository Settings → Secrets and variables → Actions
             - Verify all production secrets are configured
             - Check secret values for correct formatting
          
          2. **Validate Service Connectivity**:
             - MongoDB Atlas connection
             - Maricopa API access
             - WebShare proxy service
             - 2captcha service
          
          3. **Test System Recovery**:
             - Run this workflow again to verify fixes
             - Monitor data collection workflows
             - Check system health monitoring
          
          ### Critical Secrets
          
          - \`MONGODB_URL\` - Production database connection
          - \`MARICOPA_API_KEY\` - County data API access  
          - \`WEBSHARE_API_KEY\` - Proxy service for scraping
          - \`CAPTCHA_API_KEY\` - CAPTCHA solving service
          
          ### Next Steps
          
          - [ ] Configure missing secrets
          - [ ] Test connectivity
          - [ ] Verify data collection workflows
          - [ ] Monitor system health
          - [ ] Update team on resolution
          
          **⏰ SLA**: Critical production issues must be resolved within 2 hours.
          
          ---
          
          **Auto-generated by**: Secret Validation Monitoring System
          **Detection Time**: ${new Date().toISOString()}
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 CRITICAL: Production Secrets Failed - ${new Date().toDateString()}`,
            body: issueBody,
            labels: ['critical', 'production', 'secrets', 'monitoring', 'p0-incident', 'urgent']
          });
          
          console.log('Critical alert issue created successfully');
    
    - name: Create Warning Alert Issue  
      if: always() && steps.final-status.outputs.alert-level == 'warning' && github.event.inputs.create_alert_issue != 'false'
      uses: actions/github-script@v7
      with:
        script: |
          const alertLevel = '${{ steps.final-status.outputs.alert-level }}';
          const environment = '${{ github.event.inputs.environment || inputs.environment || "production" }}';
          const runId = '${{ github.run_id }}';
          const serverUrl = '${{ github.server_url }}';
          const repo = '${{ github.repository }}';
          
          const issueBody = `
          ## ⚠️ WARNING: Secret Configuration Issues Detected
          
          **Alert Level**: ${alertLevel}
          **Environment**: ${environment}
          **Timestamp**: ${new Date().toISOString()}
          **Workflow Run**: [${runId}](${serverUrl}/${repo}/actions/runs/${runId})
          
          ### Issues Found
          
          Non-critical secret configuration issues have been detected. While production services may still be operational, these issues should be addressed to prevent future problems.
          
          ### Recommended Actions
          
          1. Review the workflow run logs for specific details
          2. Update any placeholder or test values with production secrets
          3. Verify connectivity for any failed service checks
          4. Schedule maintenance window if needed
          
          ### Priority
          
          **P2 - High Priority**: Should be resolved within 24 hours to prevent escalation to critical status.
          
          ---
          
          **Auto-generated by**: Secret Validation Monitoring System
          **Detection Time**: ${new Date().toISOString()}
          `;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `⚠️ WARNING: Secret Configuration Issues - ${new Date().toDateString()}`,
            body: issueBody,
            labels: ['warning', 'secrets', 'monitoring', 'p2-high', 'maintenance']
          });
          
          console.log('Warning alert issue created successfully');