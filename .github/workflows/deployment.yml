name: Deployment Management

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options: ['staging', 'production']
        default: 'staging'
      force_deploy:
        description: 'Force deployment (skip health checks)'
        required: false
        type: boolean
        default: false

env:
  TEST_MONGODB_URL: mongodb://admin:${{ secrets.TEST_MONGODB_PASSWORD }}@localhost:27017/
  PYTHON_VERSION: "3.13"
  MONGODB_VERSION: "8.1.2"
  OLLAMA_VERSION: "latest"

concurrency:
  group: deployment-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-secrets:
    name: Validate Production Secrets
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: production
    outputs:
      validation-status: ${{ steps.validation.outputs.status }}
    
    steps:
    - name: Validate Required Secrets
      id: validation
      env:
        MONGODB_URL: ${{ secrets.MONGODB_URL }}
        TEST_MONGODB_PASSWORD: ${{ secrets.TEST_MONGODB_PASSWORD }}
      run: |
        missing_secrets=()
        
        # Check production secrets
        [[ -z "$MONGODB_URL" ]] && missing_secrets+=("MONGODB_URL")
        [[ -z "$TEST_MONGODB_PASSWORD" ]] && missing_secrets+=("TEST_MONGODB_PASSWORD")
        
        if [ ${#missing_secrets[@]} -eq 0 ]; then
          echo "[OK] All required production secrets are configured"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "[FAIL] Missing required production secrets:"
          printf '%s\n' "${missing_secrets[@]}"
          echo ""
          echo "Please configure these secrets in:"
          echo "Repository Settings [?] Secrets and variables [?] Actions [?] Environment secrets [?] production"
          echo ""
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi

  pre-deployment-checks:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-secrets
    environment: production
    secrets: inherit
    
    outputs:
      deploy-environment: ${{ steps.determine-env.outputs.environment }}
      version-tag: ${{ steps.version.outputs.tag }}
      health-check-required: ${{ steps.checks.outputs.health-required }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Determine deployment environment
      id: determine-env
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate version tag
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "tag=$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate deployment configuration
      run: |
        uv run python scripts/workflow_validator.py validate deployment
    
    - name: Check deployment prerequisites  
      id: checks
      run: |
        health_required="true"
        if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
          health_required="false"
        fi
        echo "health-required=$health_required" >> $GITHUB_OUTPUT
    
    - name: Security scan for deployment
      run: |
        uv run python scripts/validate_secrets.py deployment
        echo "[OK] Security validation passed"

  database-deployment:
    name: MongoDB Deployment Setup
    runs-on: ubuntu-latest
    needs: [validate-secrets, pre-deployment-checks]
    timeout-minutes: 15
    environment: production
    secrets: inherit
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.TEST_MONGODB_PASSWORD }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Wait for MongoDB
      run: |
        timeout 30 bash -c 'until mongosh --host localhost:27017 --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'
        echo "[OK] MongoDB is ready"
    
    - name: Run database migrations
      env:
        MONGODB_URL: ${{ env.TEST_MONGODB_URL }}
        DEPLOYMENT_ENV: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}
      run: |
        uv run python scripts/database/migrate.py --environment ${{ env.DEPLOYMENT_ENV }}
    
    - name: Validate database schema
      env:
        MONGODB_URL: ${{ env.TEST_MONGODB_URL }}
      run: |
        uv run python scripts/database/validate_schema.py
        echo "[OK] Database schema validation passed"
    
    - name: Create deployment backup point
      env:
        MONGODB_URL: ${{ env.TEST_MONGODB_URL }}
      run: |
        backup_name="pre-deploy-${{ needs.pre-deployment-checks.outputs.version-tag }}"
        uv run python scripts/database/backup.py --name "$backup_name"
        echo "[OK] Backup created: $backup_name"

  application-deployment:
    name: Application Deployment
    runs-on: ubuntu-latest
    needs: [validate-secrets, pre-deployment-checks, database-deployment]
    timeout-minutes: 20
    environment: production
    secrets: inherit
    
    strategy:
      matrix:
        component: ['collectors', 'processors', 'orchestration']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Setup Ollama for LLM processing
      if: matrix.component == 'processors'
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        ollama serve &
        sleep 10
        ollama pull llama3.2:latest
        echo "[OK] Ollama setup complete"
    
    - name: Deploy component configuration
      env:
        COMPONENT: ${{ matrix.component }}
        ENVIRONMENT: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}
        VERSION: ${{ needs.pre-deployment-checks.outputs.version-tag }}
      run: |
        config_file="config/deploy-${ENVIRONMENT}.yaml"
        if [[ -f "$config_file" ]]; then
          cp "$config_file" "config/active-config.yaml"
          echo "[OK] Configuration deployed for $COMPONENT"
        else
          echo "[WARN] No specific config for $ENVIRONMENT, using default"
        fi
    
    - name: Validate component deployment
      env:
        COMPONENT: ${{ matrix.component }}
      run: |
        uv run python scripts/deploy/validate_component.py --component $COMPONENT
        echo "[OK] $COMPONENT deployment validation passed"
    
    - name: Start component services
      env:
        COMPONENT: ${{ matrix.component }}
        ENVIRONMENT: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}
      run: |
        case $COMPONENT in
          "collectors")
            uv run python scripts/deploy/start_collectors.py --env $ENVIRONMENT
            ;;
          "processors") 
            uv run python scripts/deploy/start_processors.py --env $ENVIRONMENT
            ;;
          "orchestration")
            uv run python scripts/deploy/start_orchestration.py --env $ENVIRONMENT
            ;;
        esac
        echo "[OK] $COMPONENT services started"

  health-checks:
    name: Post-Deployment Health Checks
    runs-on: ubuntu-latest
    needs: [validate-secrets, pre-deployment-checks, application-deployment]
    if: needs.pre-deployment-checks.outputs.health-check-required == 'true'
    timeout-minutes: 10
    environment: production
    secrets: inherit
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.TEST_MONGODB_PASSWORD }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Setup Ollama
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        ollama serve &
        sleep 10
        ollama pull llama3.2:latest
    
    - name: Wait for services
      run: |
        timeout 30 bash -c 'until mongosh --host localhost:27017 --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'
        timeout 30 bash -c 'until curl -s http://localhost:11434/api/tags > /dev/null 2>&1; do sleep 2; done'
        echo "[OK] All services ready"
    
    - name: Run comprehensive health checks
      env:
        MONGODB_URL: ${{ env.TEST_MONGODB_URL }}
        OLLAMA_URL: http://localhost:11434
        ENVIRONMENT: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}
      run: |
        uv run python scripts/deploy/health_check.py --comprehensive --environment $ENVIRONMENT
    
    - name: Validate data processing pipeline
      env:
        MONGODB_URL: ${{ env.TEST_MONGODB_URL }}
        OLLAMA_URL: http://localhost:11434
      run: |
        uv run python scripts/deploy/validate_pipeline.py --quick-test
        echo "[OK] Data processing pipeline validated"
    
    - name: Performance baseline check
      env:
        MONGODB_URL: ${{ env.TEST_MONGODB_URL }}
        OLLAMA_URL: http://localhost:11434
      run: |
        uv run python scripts/deploy/performance_baseline.py --quick
        echo "[OK] Performance baseline established"

  deployment-notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [validate-secrets, pre-deployment-checks, health-checks]
    if: always()
    environment: production
    secrets: inherit
    
    steps:
    - name: Determine deployment status
      id: status
      run: |
        if [[ "${{ needs.health-checks.result }}" == "success" || "${{ needs.health-checks.result }}" == "skipped" ]]; then
          if [[ "${{ needs.pre-deployment-checks.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=[OK] Deployment completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT  
            echo "message=[FAIL] Pre-deployment checks failed" >> $GITHUB_OUTPUT
          fi
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=[FAIL] Health checks failed" >> $GITHUB_OUTPUT
        fi
    
    - name: Create deployment summary
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        # Deployment Summary
        
        **Environment**: ${{ needs.pre-deployment-checks.outputs.deploy-environment }}
        **Version**: ${{ needs.pre-deployment-checks.outputs.version-tag }}
        **Status**: ${{ steps.status.outputs.status }}
        **Message**: ${{ steps.status.outputs.message }}
        
        ## Component Status
        - Database: ${{ needs.database-deployment.result }}
        - Application: ${{ needs.application-deployment.result }}
        - Health Checks: ${{ needs.health-checks.result }}
        
        ## Next Steps
        ${next_steps}
        EOF
        
        if [[ "${{ steps.status.outputs.status }}" == "success" ]]; then
          echo "- Monitor application performance" >> $GITHUB_STEP_SUMMARY
          echo "- Review deployment metrics" >> $GITHUB_STEP_SUMMARY
        else
          echo "- Review deployment logs" >> $GITHUB_STEP_SUMMARY
          echo "- Consider rollback if necessary" >> $GITHUB_STEP_SUMMARY
        fi

  rollback-on-failure:
    name: Automatic Rollback
    runs-on: ubuntu-latest
    needs: [validate-secrets, pre-deployment-checks, health-checks]
    if: failure() && needs.pre-deployment-checks.outputs.deploy-environment == 'production'
    environment: production
    secrets: inherit
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra dev
    
    - name: Execute rollback procedure
      env:
        VERSION: ${{ needs.pre-deployment-checks.outputs.version-tag }}
      run: |
        echo "[ALERT] Initiating automatic rollback for production deployment"
        uv run python scripts/deploy/rollback.py --version "$VERSION" --auto
        echo "[OK] Rollback completed"
    
    - name: Verify rollback success
      run: |
        uv run python scripts/deploy/health_check.py --post-rollback
        echo "[OK] Rollback verification completed"