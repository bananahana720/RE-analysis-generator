#!/usr/bin/env python3
"""MongoDB Atlas Setup and Configuration Guide.

This script helps users set up their MongoDB Atlas connection and create
the necessary .env configuration file.

Usage:
    python scripts/setup_mongodb_atlas.py
"""

import os
import sys
from pathlib import Path
from urllib.parse import urlparse


def print_banner():
    """Print setup banner."""
    print("Phoenix Real Estate - MongoDB Atlas Setup")
    print("=" * 60)
    print("This script will help you configure MongoDB Atlas connectivity.")
    print()


def check_existing_env():
    """Check if .env file already exists."""
    env_path = Path(__file__).parent.parent / ".env"
    return env_path.exists()


def validate_mongodb_uri(uri):
    """Validate MongoDB URI format."""
    if not uri:
        return False, "URI cannot be empty"
    
    if not uri.startswith(('mongodb://', 'mongodb+srv://')):
        return False, "URI must start with mongodb:// or mongodb+srv://"
    
    try:
        parsed = urlparse(uri)
        if not parsed.hostname:
            return False, "URI must contain hostname"
        return True, "Valid URI format"
    except Exception as e:
        return False, f"Invalid URI: {str(e)}"


def get_mongodb_atlas_instructions():
    """Display MongoDB Atlas setup instructions."""
    print("MongoDB Atlas Setup Instructions")
    print("-" * 40)
    print()
    print("1. Go to https://cloud.mongodb.com/")
    print("2. Create a free account or sign in")
    print("3. Create a new cluster (M0 Sandbox is free)")
    print("4. Create a database user:")
    print("   - Go to Database Access")
    print("   - Click 'Add New Database User'")
    print("   - Choose 'Password' authentication")
    print("   - Enter username and strong password")
    print("   - Grant 'Atlas Admin' or 'readWriteAnyDatabase' role")
    print()
    print("5. Configure Network Access:")
    print("   - Go to Network Access")
    print("   - Click 'Add IP Address'")
    print("   - For development, you can use '0.0.0.0/0' (allow from anywhere)")
    print("   - For production, use specific IP addresses")
    print()
    print("6. Get Connection String:")
    print("   - Go to Clusters")
    print("   - Click 'Connect' on your cluster")
    print("   - Choose 'Connect your application'")
    print("   - Copy the connection string")
    print("   - Replace <password> with your database user password")
    print("   - Replace <dbname> with 'phoenix_real_estate'")
    print()
    print("Example connection string:")
    print("mongodb+srv://username:password@cluster0.xxxxx.mongodb.net/phoenix_real_estate?retryWrites=true&w=majority")
    print()


def interactive_setup():
    """Interactive setup process."""
    print("Interactive Configuration")
    print("-" * 30)
    print()
    
    # Get MongoDB URI
    while True:
        print("Please enter your MongoDB Atlas connection string:")
        print("(Example: mongodb+srv://username:password@cluster0.xxxxx.mongodb.net/phoenix_real_estate)")
        mongodb_uri = input("MongoDB URI: ").strip()
        
        if not mongodb_uri:
            print("‚ùå URI cannot be empty. Please try again.")
            continue
            
        is_valid, message = validate_mongodb_uri(mongodb_uri)
        if is_valid:
            print(f"‚úÖ {message}")
            break
        else:
            print(f"‚ùå {message}")
            print("Please check your connection string and try again.")
            print()
    
    # Get database name
    print()
    database_name = input("Database name [phoenix_real_estate]: ").strip()
    if not database_name:
        database_name = "phoenix_real_estate"
    
    print(f"‚úÖ Database name: {database_name}")
    
    # Get environment
    print()
    environment = input("Environment [development]: ").strip()
    if not environment:
        environment = "development"
    
    return {
        'mongodb_uri': mongodb_uri,
        'database_name': database_name,
        'environment': environment
    }


def create_env_file(config):
    """Create .env file with configuration."""
    env_path = Path(__file__).parent.parent / ".env"
    
    env_content = f"""# Phoenix Real Estate Data Collector - Environment Configuration
# Generated by setup_mongodb_atlas.py on {os.getenv('DATE', 'unknown date')}

# Database configuration
MONGODB_URI={config['mongodb_uri']}
MONGODB_DATABASE={config['database_name']}
DATABASE_NAME={config['database_name']}

# Environment
ENVIRONMENT={config['environment']}

# Logging configuration  
LOG_LEVEL=INFO
LOG_FORMAT=text

# Collection settings
MAX_REQUESTS_PER_HOUR=100
MIN_REQUEST_DELAY=3.6
TARGET_ZIP_CODES=85031,85033,85035

# Processing configuration
LLM_MODEL=llama3.2:latest
LLM_TIMEOUT=30

# Security
SECRET_KEY=development-secret-key-change-in-production

# Optional configurations (can be left as-is for initial testing)
WEBSHARE_USERNAME=your_username
WEBSHARE_PASSWORD=your_password
CAPTCHA_API_KEY=your_2captcha_api_key_here
CAPTCHA_SERVICE=2captcha
PHOENIX_SOURCES_PHOENIX_MLS_CAPTCHA_ENABLED=true
PHOENIX_SOURCES_PHOENIX_MLS_CAPTCHA_SERVICE=2captcha
PHOENIX_SOURCES_PHOENIX_MLS_CAPTCHA_TIMEOUT=180
PHOENIX_SOURCES_PHOENIX_MLS_CAPTCHA_MAX_RETRIES=3
PHOENIX_SOURCES_PHOENIX_MLS_CAPTCHA_SCREENSHOT_ON_DETECTION=true
"""
    
    try:
        with open(env_path, 'w') as f:
            f.write(env_content)
        print(f"‚úÖ Created .env file at: {env_path}")
        return True
    except Exception as e:
        print(f"‚ùå Failed to create .env file: {str(e)}")
        return False


def show_next_steps():
    """Show what to do next."""
    print()
    print("Next Steps")
    print("-" * 20)
    print("1. Validate your MongoDB Atlas connection:")
    print("   python scripts/validate_mongodb_atlas.py")
    print()
    print("2. If validation passes, you're ready to start collecting data!")
    print()
    print("3. Optional: Run the full test suite:")
    print("   uv run pytest tests/")
    print()
    print("For more information, see:")
    print("   - docs/configuration.md")
    print("   - docs/secrets-management.md")
    print("   - README.md")


def main():
    """Main setup function."""
    print_banner()
    
    # Check if .env already exists
    if check_existing_env():
        print("‚ö†Ô∏è  A .env file already exists!")
        print("Do you want to overwrite it? (y/N): ", end="")
        choice = input().strip().lower()
        if choice != 'y':
            print("Setup cancelled. Existing .env file preserved.")
            return 0
        print()
    
    # Show Atlas setup instructions
    print("First, let's make sure you have MongoDB Atlas set up...")
    print()
    show_instructions = input("Do you need MongoDB Atlas setup instructions? (y/N): ").strip().lower()
    if show_instructions == 'y':
        get_mongodb_atlas_instructions()
        input("Press Enter when you have your connection string ready...")
        print()
    
    # Interactive configuration
    try:
        config = interactive_setup()
        
        print()
        print("üìù Configuration Summary:")
        print(f"   Database: {config['database_name']}")
        print(f"   Environment: {config['environment']}")
        print(f"   MongoDB URI: {config['mongodb_uri'][:50]}...")
        print()
        
        confirm = input("Create .env file with this configuration? (Y/n): ").strip().lower()
        if confirm == 'n':
            print("Setup cancelled.")
            return 0
        
        # Create the .env file
        if create_env_file(config):
            print("‚úÖ MongoDB Atlas setup completed successfully!")
            show_next_steps()
            return 0
        else:
            print("‚ùå Failed to create .env file.")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Setup interrupted by user.")
        return 1
    except Exception as e:
        print(f"\n‚ùå Setup failed: {str(e)}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)